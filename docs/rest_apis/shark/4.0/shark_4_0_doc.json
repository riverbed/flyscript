{
  "restSchemaVersion": "1.0", 
  "name": "shark", 
  "version": "4.0", 
  "title": "Riverbed Cascade Shark REST API", 
  "status": "DRAFT 0.2", 
  "description_file": "overview_shark_4_0.md", 
  "defaultAuthorization": "required", 
  "servicePath": "/api/shark/4.0", 
  "schemas": {
    "timestamp-hp": {
      "type": "timestamp-hp", 
      "id": "timestamp-hp"
    }, 
    "interface": {
      "description": "Information on a Shark interface", 
      "type": "object", 
      "id": "interface", 
      "properties": {
        "id": {
          "description": "ID of this interface", 
          "required": true, 
          "type": "string"
        }, 
        "name": {
          "description": "Name of this interface", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "String describing this interface", 
          "required": true, 
          "type": "string"
        }, 
        "type": {
          "description": "Type of this interface", 
          "required": true, 
          "type": "string", 
          "enum": [
            "TURBOCAP_ADAPTER", 
            "PCAP_ADAPTER", 
            "VIRTUAL", 
            "BOARD_AGGREGATING", 
            "AGGREGATING", 
            "UNKNOWN"
          ]
        }, 
        "is_promiscuous_mode": {
          "description": "'true' if interface is in promiscuous mode, 'false' otherwise", 
          "required": false, 
          "type": "boolean"
        }, 
        "board": {
          "description": "Information on a physical packet capture board", 
          "required": false, 
          "type": "object", 
          "properties": {
            "name": {
              "description": "Name of this board", 
              "required": true, 
              "type": "string"
            }, 
            "type": {
              "description": "Type of this board", 
              "required": true, 
              "type": "string", 
              "enum": [
                "1G_COPPER", 
                "1G_FIBER", 
                "10G_FIBER", 
                "PCAP", 
                "UNKNOWN"
              ]
            }, 
            "pass_thru": {
              "description": "Enabled status of pass-thru mode (only supported on 1GB Copper TurboCap cards)", 
              "required": true, 
              "type": "string", 
              "enum": [
                "ENABLED", 
                "DISABLED", 
                "NOT_SUPPORTED"
              ]
            }
          }
        }, 
        "link": {
          "description": "Information on a physical interface link", 
          "required": false, 
          "type": "object", 
          "properties": {
            "status": {
              "description": "Indicates whether this link is up or down", 
              "required": false, 
              "type": "string", 
              "enum": [
                "UP", 
                "DOWN", 
                "UNKNOWN"
              ]
            }, 
            "type": {
              "description": "Link layer type of this link", 
              "required": true, 
              "type": "string", 
              "enum": [
                "NONE", 
                "EN10MB", 
                "RAW", 
                "IEEE802_11", 
                "IEEE802_11_RADIO", 
                "PPI", 
                "PPP_WITH_DIR", 
                "LINUX_SLL", 
                "C_HDLC", 
                "UNKNOWN"
              ]
            }, 
            "tap_type": {
              "description": "Tap type used on this link", 
              "required": true, 
              "type": "string", 
              "enum": [
                "NONE", 
                "CPACKET", 
                "GIGAMON_HEADER", 
                "GIGAMON_TRAILER", 
                "GIGAMON_TRAILER_X12", 
                "VSS", 
                "VSS_PORT_ID", 
                "UNKNOWN"
              ]
            }, 
            "mac_address": {
              "description": "MAC address of this link", 
              "required": true, 
              "type": "string"
            }, 
            "is_profiler_export_enabled": {
              "description": "'true' if profiler export has been enabled for this link, 'false' otherwise", 
              "required": false, 
              "type": "boolean"
            }, 
            "blink_status": {
              "description": "Indicates 'blink' status for this link", 
              "required": false, 
              "type": "string", 
              "enum": [
                "ON", 
                "OFF", 
                "UNKNOWN"
              ]
            }, 
            "dedup_status": {
              "description": "Indicates whether or not packet deduplication has been enabled for this link", 
              "required": false, 
              "type": "string", 
              "enum": [
                "ENABLED", 
                "DISABLED", 
                "NOT_SUPPORTED"
              ]
            }, 
            "addresses": {
              "description": "List of link addresses", 
              "required": false, 
              "type": "array", 
              "items": {
                "id": "link_address", 
                "type": "object", 
                "properties": {
                  "address": {
                    "description": "IP address for this interface", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "netmask": {
                    "description": "Netmask for this interface", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "broadcast": {
                    "description": "Broadcast address for this interface", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "family": {
                    "description": "Protocol family served by this interface", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "destination": {
                    "description": "Destination address for this interface", 
                    "required": false, 
                    "type": "string"
                  }
                }, 
                "description": "Address information for a physical interface"
              }
            }, 
            "stats": {
              "description": "Low-level statistics on traffic over this interface", 
              "required": false, 
              "type": "object", 
              "properties": {
                "bytes_rx": {
                  "description": "Bytes received", 
                  "required": true, 
                  "type": "number"
                }, 
                "packets_rx": {
                  "description": "Packets received", 
                  "required": true, 
                  "type": "number"
                }
              }
            }, 
            "speed_options": {
              "description": "List of link speed options", 
              "required": false, 
              "type": "array", 
              "items": {
                "id": "link_speed_option", 
                "type": "object", 
                "properties": {
                  "status": {
                    "description": "Status of this link speed option for this interface", 
                    "required": false, 
                    "type": "string", 
                    "enum": [
                      "SUPPORTED", 
                      "ENABLED", 
                      "NEGOTIATED"
                    ]
                  }, 
                  "duplex_type": {
                    "description": "Duplex type for this speed option", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "HALF", 
                      "FULL", 
                      "UNKNOWN"
                    ]
                  }, 
                  "speed_mbps": {
                    "description": "Throughput for this speed option", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "MBPS_10", 
                      "MBPS_100", 
                      "MBPS_1000", 
                      "MBPS_10000"
                    ]
                  }
                }, 
                "description": "Speed, duplex type, and status of a speed option"
              }
            }
          }
        }, 
        "virtual_info": {
          "description": "Information on a virtual interface (used internally by Shark)", 
          "required": false, 
          "type": "object", 
          "properties": {
            "file_name": {
              "description": "File name corresponding to virtual interface", 
              "required": true, 
              "type": "string"
            }, 
            "device_name": {
              "description": "Device name corresponding to virtual interface", 
              "required": true, 
              "type": "string"
            }, 
            "job_handle": {
              "description": "If virtual interface is a capture job, handle of the job", 
              "required": false, 
              "type": "string"
            }
          }
        }, 
        "interface_components": {
          "description": "For aggregating ports, list of physical ports making up the aggregation", 
          "required": true, 
          "type": "array", 
          "items": {
            "type": "string", 
            "id": "component_interface"
          }
        }
      }
    }, 
    "job_config": {
      "description": "Configuration information for a job", 
      "type": "object", 
      "id": "job_config", 
      "properties": {
        "name": {
          "description": "Job name", 
          "required": true, 
          "type": "string"
        }, 
        "interface_name": {
          "description": "Name of interface on which job is collecting packet data", 
          "required": true, 
          "type": "string"
        }, 
        "interface_description": {
          "description": "Description of interface on which job is collecting packet data", 
          "required": false, 
          "type": "string"
        }, 
        "bpf_filter": {
          "description": "BPF filter applied to this capture job", 
          "required": false, 
          "type": "string"
        }, 
        "snap_length": {
          "description": "Packet snap length for this capture job", 
          "required": false, 
          "type": "number"
        }, 
        "start_immediately": {
          "description": "'true' if job is to start immediately upon creation, 'false' otherwise", 
          "required": false, 
          "type": "boolean"
        }, 
        "requested_start_time": {
          "description": "Specific time at which job is to start", 
          "required": false, 
          "type": "timestamp"
        }, 
        "requested_end_time": {
          "description": "Specific time at which job is to end", 
          "required": false, 
          "type": "timestamp"
        }, 
        "packet_retention": {
          "description": "Packet retention info for a job", 
          "required": true, 
          "type": "object", 
          "properties": {
            "size_limit": {
              "description": "Max bytes of packet data to be retained", 
              "required": true, 
              "type": "number"
            }, 
            "packet_limit": {
              "description": "Max number of packets to be retained", 
              "required": false, 
              "type": "number"
            }, 
            "time_limit": {
              "description": "Time period for which packet data will be retained", 
              "required": false, 
              "type": "number"
            }
          }
        }, 
        "indexing": {
          "description": "Job index configuration", 
          "required": false, 
          "type": "object", 
          "properties": {
            "size_limit": {
              "description": "Max number of bytes for this index", 
              "required": false, 
              "type": "number"
            }, 
            "time_limit": {
              "description": "Max time this index can exist", 
              "required": false, 
              "type": "number"
            }, 
            "synced": {
              "description": "'true' if index is synced with packet storage", 
              "required": false, 
              "type": "boolean"
            }
          }
        }, 
        "stop_rule": {
          "description": "Stop rule for a job", 
          "required": false, 
          "type": "object", 
          "properties": {
            "size_limit": {
              "description": "Max bytes of packet data", 
              "required": false, 
              "type": "number"
            }, 
            "packet_limit": {
              "description": "Max number of packets", 
              "required": false, 
              "type": "number"
            }, 
            "time_limit": {
              "description": "Max time in seconds", 
              "required": false, 
              "type": "number"
            }
          }
        }
      }
    }, 
    "job_status": {
      "description": "Status information for a job", 
      "type": "object", 
      "id": "job_status", 
      "properties": {
        "state": {
          "description": "Running state of a capture job", 
          "required": true, 
          "type": "string", 
          "enum": [
            "ACTIVE", 
            "RUNNING", 
            "STOPPED", 
            "UNKNOWN"
          ]
        }, 
        "packet_start_time": {
          "description": "First packet timestamp for this job", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "packet_end_time": {
          "description": "Last packet timestamp for this job", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "packet_size": {
          "description": "Size of this job in packet storage", 
          "required": true, 
          "type": "number"
        }
      }
    }, 
    "job_index_info": {
      "type": "object", 
      "id": "job_index_info", 
      "properties": {
        "status": {
          "required": true, 
          "type": "string", 
          "description": "Running state of an index", 
          "enum": [
            "OK", 
            "RUNNING", 
            "ERROR"
          ]
        }, 
        "start_time": {
          "description": "Start time of the index", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "end_time": {
          "description": "End time of the index", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "synced_with_job": {
          "required": false, 
          "type": "boolean"
        }, 
        "size": {
          "description": "Size of index on the OS file system", 
          "required": false, 
          "type": "number"
        }
      }
    }, 
    "clip_config": {
      "description": "Configuration of a clip", 
      "type": "object", 
      "id": "clip_config", 
      "properties": {
        "job_id": {
          "description": "Job ID on which the clip is applied", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "Description of this clip configuration", 
          "required": false, 
          "type": "string"
        }, 
        "filters": {
          "description": "List of clip filters", 
          "required": false, 
          "type": "array", 
          "id": "filters", 
          "items": {
            "id": "filters", 
            "description": "Configuration for a clip filter", 
            "type": "object", 
            "properties": {
              "type": {
                "description": "Clip configuration filter type", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "TIME", 
                  "SHARK", 
                  "BPF", 
                  "WIRESHARK_DISPLAY"
                ]
              }, 
              "value": {
                "description": "Value of this filter", 
                "required": true, 
                "type": "string"
              }, 
              "description": {
                "description": "Description of this filter", 
                "required": false, 
                "type": "string"
              }
            }
          }
        }
      }
    }, 
    "clip_status": {
      "description": "Status information for a clip", 
      "type": "object", 
      "id": "clip_status", 
      "properties": {
        "creation_time": {
          "description": "Clip creation time", 
          "required": false, 
          "type": "timestamp"
        }, 
        "modification_time": {
          "description": "Clip last modified time", 
          "required": false, 
          "type": "timestamp"
        }, 
        "estimated_size": {
          "description": "Estimated size for this clip in packet storage", 
          "required": false, 
          "type": "number"
        }, 
        "locked": {
          "description": "'true' if packets and the index for this clip are locked, 'false' otherwise", 
          "required": true, 
          "type": "boolean"
        }
      }
    }, 
    "index_info": {
      "description": "Information for one index", 
      "type": "object", 
      "id": "index_info", 
      "properties": {
        "status": {
          "description": "Running state of an index", 
          "required": true, 
          "type": "string", 
          "enum": [
            "OK", 
            "RUNNING", 
            "ERROR"
          ]
        }, 
        "start_time": {
          "description": "First packet timestamp for this index", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "end_time": {
          "description": "Last packet timestamp for this index", 
          "required": true, 
          "$ref": "timestamp-hp"
        }
      }
    }, 
    "file": {
      "description": "File's details", 
      "type": "object", 
      "id": "file", 
      "properties": {
        "type": {
          "description": "File type", 
          "required": true, 
          "type": "string", 
          "enum": [
            "MULTISEGMENT_FILE", 
            "MERGED_FILE", 
            "PCAP_FILE", 
            "PCAPNG_FILE", 
            "ERF_FILE", 
            "UNKNOWN_FILE"
          ]
        }, 
        "id": {
          "description": "File id", 
          "required": true, 
          "type": "string"
        }, 
        "link_type": {
          "description": "Link layer type", 
          "required": false, 
          "type": "string"
        }, 
        "format": {
          "required": false, 
          "type": "string", 
          "description": "File time format", 
          "enum": [
            "PCAP_US", 
            "PCAP_NS", 
            "PCAPNG_US", 
            "PCAPNG_NS", 
            "UNKNOWN"
          ]
        }, 
        "size": {
          "description": "File size in bytes", 
          "required": false, 
          "type": "number"
        }, 
        "created": {
          "description": "Creation time in Unix time format", 
          "required": false, 
          "type": "timestamp"
        }, 
        "modified": {
          "description": "Modification time in Unix time format", 
          "required": false, 
          "type": "timestamp"
        }, 
        "linked_sources": {
          "description": "Linked sources details list", 
          "required": false, 
          "type": "array", 
          "items": {
            "id": "linked_source", 
            "type": "object", 
            "properties": {
              "path": {
                "description": "Linked source path. It could be either an absolute path (fs/ID) or a relative path starting from the aggregated file folder.", 
                "required": true, 
                "type": "string"
              }, 
              "default_source": {
                "description": "The default source is the reference source in a multisegment file collection and it is used as reference for the time skew calculation", 
                "required": false, 
                "type": "boolean"
              }, 
              "timeskew": {
                "description": "It is the packets timestamps offset associated with the linked source", 
                "required": false, 
                "type": "number"
              }, 
              "description": {
                "description": "A simple description field associated with the linked source", 
                "required": false, 
                "type": "string"
              }
            }
          }
        }, 
        "index": {
          "description": "Index info", 
          "required": false, 
          "$ref": "index_info"
        }
      }
    }, 
    "dir": {
      "description": "Directory details", 
      "type": "object", 
      "id": "dir", 
      "properties": {
        "id": {
          "description": "Directory id", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Directory description. It is used when the directory has an alias name.", 
          "required": false, 
          "type": "string"
        }, 
        "created": {
          "description": "Creation time in Unix time format", 
          "required": false, 
          "type": "timestamp"
        }, 
        "modified": {
          "description": "Modification time in Unix time format", 
          "required": false, 
          "type": "timestamp"
        }, 
        "files": {
          "description": "List of files", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "file", 
            "$ref": "file"
          }
        }, 
        "dirs": {
          "description": "List of directories", 
          "required": true, 
          "type": "array", 
          "id": "fs", 
          "items": {
            "id": "dir", 
            "$ref": "dir"
          }
        }
      }
    }, 
    "filter": {
      "type": "object", 
      "properties": {
        "type": {
          "description": "Filter type", 
          "required": true, 
          "type": "string", 
          "enum": [
            "TIME", 
            "SHARK", 
            "BPF", 
            "WIRESHARK_DISPLAY", 
            "DECRYPT", 
            "STATE"
          ]
        }, 
        "value": {
          "description": "Filter value", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Description, if needed", 
          "required": false, 
          "type": "string"
        }
      }, 
      "id": "filter"
    }, 
    "export_config": {
      "type": "object", 
      "id": "export_config", 
      "properties": {
        "output_filename": {
          "description": "If sending packets to file, the filename within the Shark file system", 
          "required": false, 
          "type": "string"
        }, 
        "output_format": {
          "description": "Output format (PCAP or PCAP-NG) and resolution of packet stream", 
          "required": true, 
          "type": "string", 
          "enum": [
            "PCAP_US", 
            "PCAP_NS", 
            "PCAPNG_US", 
            "PCAPNG_NS"
          ]
        }, 
        "start_time": {
          "description": "Time (seconds from epoch) at which export is to begin", 
          "required": false, 
          "type": "timestamp"
        }, 
        "end_time": {
          "description": "Time (seconds from epoch) at which export is to end", 
          "required": false, 
          "type": "timestamp"
        }, 
        "stop_rule": {
          "description": "Stop rule for a job", 
          "required": false, 
          "type": "object", 
          "properties": {
            "size_limit": {
              "description": "Max bytes of packet data", 
              "required": false, 
              "type": "number"
            }, 
            "packet_limit": {
              "description": "Max number of packets", 
              "required": false, 
              "type": "number"
            }, 
            "time_limit": {
              "description": "Max time in seconds", 
              "required": false, 
              "type": "number"
            }
          }
        }, 
        "filters": {
          "description": "Collection of filters to apply to packets prior to export", 
          "required": false, 
          "type": "array", 
          "items": {
            "id": "filter", 
            "$ref": "filter"
          }
        }
      }
    }, 
    "export_status": {
      "type": "object", 
      "id": "export_status", 
      "properties": {
        "state": {
          "description": "State of the export", 
          "required": true, 
          "type": "string", 
          "enum": [
            "UNINITIALIZED", 
            "LOADED", 
            "PARAMS_LOADED", 
            "INITIALIZED", 
            "READY", 
            "RUNNING", 
            "ERRORS", 
            "DONE", 
            "CLOSING", 
            "PAUSED"
          ]
        }, 
        "bytes_approx": {
          "description": "For exports from a job, approximate number of bytes in the export", 
          "required": false, 
          "type": "number"
        }, 
        "creation_time": {
          "description": "Time at which the export was created", 
          "required": true, 
          "$ref": "timestamp-hp"
        }, 
        "owner": {
          "description": "User who initiated the export", 
          "required": true, 
          "type": "string"
        }
      }
    }, 
    "export": {
      "description": "Information about an export", 
      "type": "object", 
      "id": "export", 
      "properties": {
        "id": {
          "description": "ID of export", 
          "required": true, 
          "type": "string"
        }, 
        "config": {
          "description": "Configuration of this export", 
          "required": true, 
          "$ref": "export_config"
        }, 
        "status": {
          "description": "Status of this export", 
          "required": true, 
          "$ref": "export_status"
        }
      }
    }, 
    "dimension_restrictions": {
      "id": "dimension_restrictions", 
      "type": "object", 
      "properties": {
        "bool_operator": {
          "description": "The boolean operation to apply: \"And\" or \"Or\"", 
          "required": true, 
          "type": "string", 
          "enum": [
            "NOT_INITIALIZED", 
            "AND", 
            "OR"
          ]
        }, 
        "restrictions": {
          "description": "Restriction list", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "restriction", 
            "type": "object", 
            "properties": {
              "field": {
                "description": "The dimension field identified by the database column name (e.g. c2 or c5)", 
                "notes": "Column numbering starts with 1 and the field must be a dimension", 
                "required": true, 
                "type": "string"
              }, 
              "value": {
                "description": "The matching value", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "sub_restrictions": {
          "description": "Sub-restriction list", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "sub_restriction", 
            "$ref": "dimension_restrictions"
          }
        }
      }, 
      "description": "Specification of dimension restrictions for a watch. Dimension restrictions can be used to narrow down what the watch checks, so that, for example, only some bars in a barchart are observed. If multiple restrictions are present in the list, the server ANDs them."
    }, 
    "watch": {
      "description": "Watch configuration", 
      "type": "object", 
      "id": "watch", 
      "properties": {
        "watch_uid": {
          "description": "Watch Id", 
          "required": true, 
          "type": "string"
        }, 
        "output_uid": {
          "description": "Output Id that the watch refers to", 
          "required": true, 
          "type": "string"
        }, 
        "enabled": {
          "description": "True if enabled", 
          "required": true, 
          "type": "boolean"
        }, 
        "severity": {
          "description": "Severity, specified as an integer number with with syslog convention", 
          "required": false, 
          "default": "5", 
          "type": "number"
        }, 
        "info": {
          "description": "Watch info section", 
          "required": true, 
          "type": "object", 
          "properties": {
            "name": {
              "description": "Watch human-friendly name", 
              "required": true, 
              "type": "string"
            }, 
            "description": {
              "description": "Watch human-friendly description", 
              "required": false, 
              "type": "string"
            }, 
            "group": {
              "description": "Watch group. Can be used to organize the watches.", 
              "required": false, 
              "type": "string"
            }
          }
        }, 
        "validity": {
          "description": "Timing information for the watch. It specifies when the watch must be considered valid and keep under control.", 
          "required": false, 
          "type": "object", 
          "properties": {
            "from": {
              "description": "Watch validity start time. If not specified, Start time will be used.", 
              "required": true, 
              "type": "object", 
              "properties": {
                "value_type": {
                  "description": "Validity type", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "DEFAULT", 
                    "NOT_SPECIFIED", 
                    "START", 
                    "END", 
                    "RELATIVE", 
                    "ABSOLUTE"
                  ]
                }, 
                "value_us": {
                  "description": "Validity value, can be expressed as the absolute timestamp or relative time span depending on the type", 
                  "required": true, 
                  "type": "number"
                }
              }
            }, 
            "to": {
              "description": "Watch validity end time. If not specified, End time will be used.", 
              "required": true, 
              "type": "object", 
              "properties": {
                "value_type": {
                  "description": "Validity type", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "DEFAULT", 
                    "NOT_SPECIFIED", 
                    "START", 
                    "END", 
                    "RELATIVE", 
                    "ABSOLUTE"
                  ]
                }, 
                "value_us": {
                  "description": "Validity value, can be expressed as the absolute timestamp or relative time span depending on the type", 
                  "required": true, 
                  "type": "number"
                }
              }
            }
          }
        }, 
        "timing": {
          "description": "Information about the window that is considered by the watch during every check", 
          "required": true, 
          "type": "object", 
          "properties": {
            "sampling_ms": {
              "description": "", 
              "required": false, 
              "type": "number"
            }, 
            "interval_ms": {
              "description": "The time interval that the watch will cover. This is the time window that the watch must consider during every check.", 
              "required": false, 
              "type": "number"
            }, 
            "from": {
              "description": "The time interval that the watch will cover", 
              "notes": "This is the time window that the watch must consider during every check.", 
              "required": false, 
              "type": "string", 
              "enum": [
                "NOT_INITIALIZED", 
                "NOW", 
                "BEGINNING_OF_VIEW", 
                "SECOND", 
                "MINUTE", 
                "HOUR", 
                "DAY", 
                "WEEK", 
                "MONTH", 
                "YEAR"
              ]
            }, 
            "time_analysis_mode": {
              "description": "Specification of the type of analysis for the data samples", 
              "notes": "If SAMPLE_BY_SAMPLE, checks every sample and applies the conditions to it (stripchart style). If AGGREGATED, aggregates per interval_ms to calculate the value for the conditions (barchart style).", 
              "required": false, 
              "type": "string", 
              "enum": [
                "SAMPLE_BY_SAMPLE", 
                "AGGREGATED"
              ]
            }
          }
        }, 
        "conversation_dimensions": {
          "description": "This is used when the watch is supposed to treat two dimensions as if they are part of a single connection. For example, the source and destination ip addresses of a conversation ring. The watch will detect a connection and include the traffic coming from both the senders in a single value to check.", 
          "required": false, 
          "type": "array", 
          "items": {
            "id": "conversation_group", 
            "type": "array", 
            "items": {
              "type": "string", 
              "id": "field_name"
            }
          }
        }, 
        "triggers": {
          "description": "List of the events that are watched. An event is something like \"bandwdth bigger than 1000\" or \"packets for host 1.2.3.4 smaller than 10 for more than a minute\".", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "trigger", 
            "type": "object", 
            "properties": {
              "uid": {
                "description": "The unique identifier of the event", 
                "required": true, 
                "type": "string"
              }, 
              "bool_operator": {
                "description": "The boolean operation to apply: \"And\" or \"Or\"", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "NOT_INITIALIZED", 
                  "AND", 
                  "OR"
                ]
              }, 
              "dimension_restrictions": {
                "description": "The list of dimension restrictions", 
                "required": false, 
                "$ref": "dimension_restrictions"
              }, 
              "duration_info": {
                "description": "Information about the amount of time the value crosses the threshold before the event is triggered. If this field is not present, the server event will be triggered after the first sampling interval in which the value is beyond the threshold. The duration must be a multiple of the view sampling time, otherwise the server will return an error.", 
                "required": false, 
                "type": "object", 
                "properties": {
                  "duration_type": {
                    "description": "Type of duration", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "NOT_INITIALIZED", 
                      "MORE_THAN", 
                      "EQUALS"
                    ]
                  }, 
                  "duration_ms": {
                    "description": "The duration time, in milliseconds. This must be a multiple of the view sampling time.", 
                    "required": true, 
                    "type": "number"
                  }
                }
              }, 
              "repetition_info": {
                "description": "Information about how many times the treshold needs to be crossed in order for the event to become signaled", 
                "required": false, 
                "type": "object", 
                "properties": {
                  "number_of_times": {
                    "description": "How many times the treshold needs to be crossed in order for the event to become signaled", 
                    "required": true, 
                    "type": "number"
                  }
                }
              }, 
              "condition_operator": {
                "description": "The boolean operation to apply: \"And\" or \"Or\"", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "NOT_INITIALIZED", 
                  "AND", 
                  "OR"
                ]
              }, 
              "conditions": {
                "description": "The list of conditions that will have to be validated in order for the event to be satisfied. If multiple conditions are present, the event is satisfied according to the operation value.", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "condition", 
                  "type": "object", 
                  "properties": {
                    "field": {
                      "description": "The numeric (or non-numeric) value that will be checked against the threshold. Non numeric values can be checked with the Equal, NotEqual and Exists operators. NOTE: the field name refers to the database column name (e.g. c2 or c5) (the base number is 1).", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "condition_info": {
                      "description": "Generic information about this threshold", 
                      "required": true, 
                      "type": "object", 
                      "properties": {
                        "check_type": {
                          "description": "The type of check to perform", 
                          "required": true, 
                          "type": "string", 
                          "enum": [
                            "EQUAL", 
                            "NOT_EQUAL", 
                            "LESS", 
                            "LESS_OR_EQUAL", 
                            "GREATER", 
                            "GREATER_OR_EQUAL", 
                            "INSIDE_RANGE", 
                            "OUTSIDE_RANGE", 
                            "EXISTS", 
                            "TOPN_CHANGED"
                          ]
                        }, 
                        "value": {
                          "description": "The threshold value", 
                          "required": false, 
                          "type": "string"
                        }, 
                        "second_value": {
                          "description": "Second threshold value, when supported (e.g. Inside/Outside range).", 
                          "required": false, 
                          "type": "string"
                        }, 
                        "aggregation_type": {
                          "description": "The type of threshold value", 
                          "required": true, 
                          "type": "string", 
                          "enum": [
                            "VALUE", 
                            "PERCENTAGE", 
                            "SUMVALUE", 
                            "SUMPERCENTAGE", 
                            "COUNT"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }, 
        "actions": {
          "description": "The actions to be performed when one or more events are signaled. Action examples are: start dumping to disk, create a report, start a view, etc.", 
          "required": true, 
          "type": "object", 
          "properties": {
            "fired_triggers": {
              "description": "The list of events that need to be signaled AT THE SAME TIME in order for the watch actions to run", 
              "required": true, 
              "type": "object", 
              "properties": {
                "bool_operator": {
                  "description": "The boolean operation to apply: \"And\" or \"Or\"", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NOT_INITIALIZED", 
                    "AND", 
                    "OR"
                  ]
                }, 
                "triggering_mode": {
                  "description": "The condition that will cause a line to be considered true", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "ONESHOT", 
                    "LEADINGEDGE", 
                    "CONTINUOUS", 
                    "TRAILINGEDGE", 
                    "LEADING_AND_TRAILING_EDGE"
                  ]
                }, 
                "triggers": {
                  "description": "The List of unique ids of the events that need to be signaled", 
                  "required": true, 
                  "type": "array", 
                  "items": {
                    "type": "string", 
                    "id": "trigger_uid"
                  }
                }
              }
            }, 
            "actions": {
              "description": "Action list", 
              "required": true, 
              "type": "array", 
              "items": {
                "id": "action", 
                "type": "object", 
                "properties": {
                  "uid": {
                    "description": "Action Id", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "type": {
                    "description": "The type of action. This must correspond to the name of a Shark Probe's action plugin.", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "side": {
                    "description": "Who is in charge of performing the action, either server or client", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "CLIENT", 
                      "SERVER"
                    ]
                  }, 
                  "parameters": {
                    "description": "Parameter list", 
                    "required": true, 
                    "type": "array", 
                    "items": {
                      "id": "parameter", 
                      "type": "object", 
                      "properties": {
                        "name": {
                          "description": "Parameter name", 
                          "required": true, 
                          "type": "string"
                        }, 
                        "value": {
                          "description": "Parameter value", 
                          "required": true, 
                          "type": "string"
                        }, 
                        "custom": {
                          "description": "True if it is a custom parameter", 
                          "required": false, 
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, 
    "view": {
      "description": "View configuration", 
      "type": "object", 
      "id": "view", 
      "properties": {
        "info": {
          "description": "View information section", 
          "required": false, 
          "type": "object", 
          "properties": {
            "title": {
              "description": "View title", 
              "required": false, 
              "type": "string"
            }, 
            "description": {
              "description": "View description", 
              "required": false, 
              "type": "string"
            }
          }
        }, 
        "parameters": {
          "description": "View main configuration parameters section", 
          "required": true, 
          "type": "object", 
          "properties": {
            "sampling_time_msec": {
              "description": "View data sampling time", 
              "required": false, 
              "default": "1000", 
              "type": "number"
            }, 
            "retention_time_msec": {
              "description": "Data retention time: data collected for a view will be deleted after the retention time elapsed", 
              "required": false, 
              "default": "86400000", 
              "type": "number"
            }, 
            "autoclose_idle_timeout_msec": {
              "description": "Autoclose timeout: if set, the view will be closed if it is not accessed for a period of time equal to the timeout value", 
              "required": false, 
              "default": "0", 
              "type": "number"
            }
          }
        }, 
        "input_source": {
          "description": "Input source configuration", 
          "required": true, 
          "type": "object", 
          "properties": {
            "path": {
              "description": "Path of the source to open", 
              "notes": "Specifies a job, clip, file or live device. Must start with the source type, e.g. fs/admin/trace.pcap or interfaces/tc0", 
              "required": true, 
              "type": "string"
            }, 
            "disable_index": {
              "description": "If true, the source will not be allowed to use an index to speed up the processing", 
              "required": false, 
              "type": "boolean"
            }, 
            "filters": {
              "description": "List or filters for this input", 
              "required": true, 
              "type": "array", 
              "items": {
                "id": "filter", 
                "$ref": "filter"
              }
            }
          }
        }, 
        "processors": {
          "description": "Processors configuration", 
          "required": true, 
          "type": "array", 
          "minItems": 1, 
          "items": {
            "id": "processor", 
            "type": "object", 
            "properties": {
              "id": {
                "description": "Processor Id", 
                "required": true, 
                "type": "string"
              }, 
              "keys": {
                "description": "List of fields that will act as keys in this configuration", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "key", 
                  "type": "object", 
                  "properties": {
                    "field": {
                      "description": "Field name according to the Shark syntax", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "id": {
                      "description": "Alias that can be given to the field, used as identifier in the output configuration", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "default_value": {
                      "description": "Default value, if needed", 
                      "required": false, 
                      "type": "string"
                    }
                  }
                }
              }, 
              "metrics": {
                "description": "List of fields that will act as metrics in this configuration", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "metric", 
                  "type": "object", 
                  "properties": {
                    "field": {
                      "description": "Field name according to the Shark syntax", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "operation": {
                      "description": "Calculation done by engine on this field", 
                      "required": true, 
                      "type": "string", 
                      "enum": [
                        "NONE", 
                        "SUM", 
                        "MAX", 
                        "MIN", 
                        "AVG", 
                        "TIME_AVG"
                      ]
                    }, 
                    "id": {
                      "description": "Alias that can be given to the field, used as identifier in the output configuration", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "default_value": {
                      "description": "Default value, if needed", 
                      "required": false, 
                      "type": "string"
                    }
                  }
                }
              }, 
              "filters": {
                "description": "Filter list for the processor", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "filter", 
                  "$ref": "filter"
                }
              }, 
              "outputs": {
                "description": "Output list for the processor", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "output", 
                  "type": "object", 
                  "properties": {
                    "id": {
                      "description": "Output Id", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "fields": {
                      "description": "List of requested fields in the output", 
                      "required": true, 
                      "type": "array", 
                      "items": {
                        "id": "field", 
                        "type": "object", 
                        "properties": {
                          "id": {
                            "description": "Id of the field. This is the same of the processor configuration.", 
                            "required": true, 
                            "type": "string"
                          }, 
                          "description": {
                            "description": "Description, if needed", 
                            "required": false, 
                            "type": "string"
                          }, 
                          "operation": {
                            "description": "Further output operation, if needed. Notice that using this might reduce performance.", 
                            "required": false, 
                            "default": "NONE", 
                            "type": "string", 
                            "enum": [
                              "NONE", 
                              "AVG", 
                              "COUNT", 
                              "MAX", 
                              "MIN", 
                              "SUM"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }, 
            "description": "Processor configuration"
          }
        }, 
        "watches": {
          "description": "Watch list", 
          "required": true, 
          "type": "array", 
          "id": "watches", 
          "items": {
            "id": "watch", 
            "$ref": "watch"
          }
        }, 
        "client_config": {
          "description": "Client-specific section, not used by Shark", 
          "notes": "Encoded as CDATA in XML", 
          "required": false, 
          "type": "string"
        }
      }
    }, 
    "group": {
      "description": "Definition of a user group", 
      "type": "object", 
      "id": "group", 
      "properties": {
        "name": {
          "description": "Group name", 
          "required": true, 
          "type": "string"
        }, 
        "description": {
          "description": "Group description", 
          "required": true, 
          "type": "string"
        }, 
        "capabilities": {
          "description": "Specifies the list of capabilities for the group", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "capability", 
            "type": "string", 
            "description": "Specifies the capabilities of the group", 
            "enum": [
              "CAPABILITY_ADMINISTRATOR", 
              "CAPABILITY_APPLY_VIEWS_ON_FILES", 
              "CAPABILITY_APPLY_VIEWS_ON_INTERFACES", 
              "CAPABILITY_SHARE_VIEWS", 
              "CAPABILITY_CREATE_FILES", 
              "CAPABILITY_IMPORT_FILES", 
              "CAPABILITY_EXPORT_FILES", 
              "CAPABILITY_CREATE_JOBS", 
              "CAPABILITY_SCHEDULE_WATCHES", 
              "CAPABILITY_ACCESS_PROBE_FILES"
            ]
          }
        }
      }
    }, 
    "user": {
      "description": "Information about a user account", 
      "type": "object", 
      "id": "user", 
      "properties": {
        "name": {
          "description": "User name", 
          "required": true, 
          "type": "string"
        }, 
        "is_admin": {
          "description": "Indication if the user is an administrator", 
          "required": true, 
          "type": "boolean"
        }, 
        "is_locked": {
          "description": "Indication if the user account is locked", 
          "required": true, 
          "type": "boolean"
        }, 
        "can_be_locked": {
          "description": "Indication if the user account can be locked", 
          "required": true, 
          "type": "boolean"
        }, 
        "groups": {
          "required": true, 
          "type": "array", 
          "description": "List of groups of which the user is a member", 
          "items": {
            "type": "string", 
            "id": "group"
          }
        }
      }
    }, 
    "basic_settings": {
      "description": "Basic Shark configuration options", 
      "type": "object", 
      "id": "basic_settings", 
      "properties": {
        "hostname": {
          "description": "Shark host name", 
          "required": true, 
          "type": "string"
        }, 
        "domain": {
          "description": "Network domain", 
          "required": true, 
          "type": "string"
        }, 
        "primary_dns": {
          "description": "Primary DNS server", 
          "required": true, 
          "type": "string"
        }, 
        "secondary_dns": {
          "description": "Secondary DNS server", 
          "required": false, 
          "type": "string"
        }, 
        "ssh_enabled": {
          "description": "'true' if SSH access to this shark is enabled, 'false' otherwise", 
          "required": true, 
          "type": "boolean"
        }, 
        "fips_enabled": {
          "description": "'true' if FIPS mode is enabled, 'false' otherwise", 
          "required": true, 
          "type": "boolean"
        }, 
        "timezone": {
          "description": "Time zone (from IANA Time Zone Database) of this Shark", 
          "required": true, 
          "type": "string"
        }, 
        "ntp_config": {
          "description": "Shark NTP Configuration", 
          "required": true, 
          "type": "object", 
          "properties": {
            "profiler_mode": {
              "description": "'true' if Profiler acts as NTP server, 'false' otherwise", 
              "required": true, 
              "type": "boolean"
            }, 
            "servers": {
              "description": "List of NTP Servers", 
              "required": true, 
              "type": "array", 
              "items": {
                "type": "string", 
                "id": "server"
              }
            }
          }
        }, 
        "mgmt_ports": {
          "description": "List of management ports", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "port", 
            "type": "object", 
            "properties": {
              "interface": {
                "description": "Interface name", 
                "required": true, 
                "type": "string"
              }, 
              "enabled": {
                "description": "'true' if enabled, 'false' if disabled", 
                "required": false, 
                "type": "boolean"
              }, 
              "dhcp": {
                "description": "'true' if DHCP is enabled on this interface, 'false' otherwise", 
                "required": true, 
                "type": "boolean"
              }, 
              "ip_address": {
                "description": "IPV4 address for this interface (empty if DHCP is enabled)", 
                "required": true, 
                "type": "string"
              }, 
              "netmask": {
                "description": "Network mask for this interface (empty of DHCP is enabled)", 
                "required": true, 
                "type": "string"
              }, 
              "gateway": {
                "description": "Network gateway for this interface (empty if DHCP is enabled)", 
                "required": true, 
                "type": "string"
              }
            }, 
            "description": "Shark management port configuration"
          }
        }
      }
    }, 
    "auth_settings": {
      "description": "Authentication settings", 
      "type": "object", 
      "id": "auth_settings", 
      "properties": {
        "webui_settings": {
          "description": "WebUI configuration settings for this Shark", 
          "required": true, 
          "type": "object", 
          "id": "webui_settings", 
          "properties": {
            "need_purpose": {
              "description": "Enabled if the user should be prompted to specify a purpose during login", 
              "required": true, 
              "type": "boolean"
            }, 
            "session_duration": {
              "description": "Session inactivity timeout", 
              "notes": "In minutes", 
              "required": true, 
              "type": "number"
            }, 
            "login_banner": {
              "description": "Login banner", 
              "required": true, 
              "type": "string"
            }
          }
        }, 
        "auth_sequence": {
          "description": "List of authentication mechanisms used by Shark", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "auth_type", 
            "type": "string", 
            "description": "Authentication Mode", 
            "enum": [
              "LOCAL", 
              "TACACS", 
              "RADIUS"
            ]
          }
        }, 
        "remote_auth_settings": {
          "description": "Additional authentication parameter settings for TACACS+ and RADIUS servers", 
          "required": false, 
          "type": "object", 
          "id": "remote_auth_settings", 
          "properties": {
            "default_group": {
              "description": "Default group used for remote authentication", 
              "required": true, 
              "type": "string"
            }, 
            "fallback_on_unavailable_only": {
              "description": "'true' fallbacks to the next authentication mechanism if TACACS+ or RADIUS servers are unavailable, 'false' otherwise", 
              "required": true, 
              "type": "boolean"
            }
          }
        }, 
        "local_settings": {
          "description": "Local authentication type parameters", 
          "required": true, 
          "type": "object", 
          "id": "local_settings", 
          "properties": {
            "max_unsuccessful_login_attempts": {
              "description": "Number of unsuccessful attempts before user is locked out", 
              "required": true, 
              "type": "number"
            }, 
            "min_password_length": {
              "description": "Minimum password length", 
              "required": true, 
              "type": "number"
            }, 
            "min_password_upper_letter": {
              "description": "Minimum number of upper-case letters", 
              "required": true, 
              "type": "number"
            }, 
            "min_password_lower_letter": {
              "description": "Minimum number of lower-case letters", 
              "required": true, 
              "type": "number"
            }, 
            "min_password_numeric_character": {
              "description": "Minimum number of numeric characters", 
              "required": true, 
              "type": "number"
            }, 
            "min_password_special_character": {
              "description": "Minimum number of special characters", 
              "required": true, 
              "type": "number"
            }, 
            "password_change_history": {
              "description": "Number of previous user passwords stored in history", 
              "required": true, 
              "type": "number"
            }, 
            "max_password_lifetime_days": {
              "description": "Number of days after which password expires", 
              "required": true, 
              "type": "number"
            }
          }
        }, 
        "tacacs_settings": {
          "description": "TACACS+ authentication configuration", 
          "required": true, 
          "type": "object", 
          "id": "tacacs_settings", 
          "properties": {
            "client_port": {
              "description": "Client port", 
              "required": true, 
              "type": "string"
            }, 
            "authorization_attribute": {
              "description": "Authorization attribute", 
              "required": true, 
              "type": "string"
            }, 
            "authorization_value": {
              "description": "Authorization value", 
              "required": true, 
              "type": "string"
            }, 
            "authorization_response_attribute": {
              "description": "Authorization response attribute. If set to '*', only the first attribute-value pair returned by the server will be considered during authorization.", 
              "required": true, 
              "type": "string"
            }, 
            "accounting_enabled": {
              "description": "'true' to enable TACACS+ accounting, 'false' otherwise", 
              "required": true, 
              "type": "boolean"
            }, 
            "accounting_attribute": {
              "description": "Acccounting attribute", 
              "required": true, 
              "type": "string"
            }, 
            "accounting_value": {
              "description": "Accounting value", 
              "required": true, 
              "type": "string"
            }, 
            "accounting_terminator": {
              "description": "Accounting terminator", 
              "required": true, 
              "type": "string"
            }, 
            "servers": {
              "description": "List of server mappings", 
              "required": true, 
              "type": "array", 
              "items": {
                "id": "server", 
                "type": "object", 
                "properties": {
                  "address": {
                    "description": "IP Address", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "port": {
                    "description": "Port number", 
                    "required": true, 
                    "type": "number"
                  }, 
                  "shared_secret": {
                    "description": "Shared secret key", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }
            }
          }
        }, 
        "radius_settings": {
          "description": "RADIUS authentication configuration", 
          "required": true, 
          "type": "object", 
          "id": "radius_settings", 
          "properties": {
            "client_port": {
              "description": "Client port", 
              "required": true, 
              "type": "string"
            }, 
            "encryption_protocol": {
              "required": true, 
              "type": "string", 
              "description": "Encryption protocol", 
              "enum": [
                "PAP", 
                "CHAP", 
                "MSCHAP1", 
                "MSCHAP2"
              ]
            }, 
            "accounting_enabled": {
              "description": "'true' to enable RADIUS accounting, 'false' otherwise", 
              "required": true, 
              "type": "boolean"
            }, 
            "servers": {
              "description": "List of server mappings", 
              "required": true, 
              "type": "array", 
              "items": {
                "id": "server", 
                "type": "object", 
                "properties": {
                  "address": {
                    "description": "IP Address", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "port": {
                    "description": "Port number", 
                    "required": true, 
                    "type": "number"
                  }, 
                  "shared_secret": {
                    "description": "Shared secret key", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }, 
    "audit_settings": {
      "description": "Audit system settings", 
      "type": "object", 
      "id": "audit_settings", 
      "properties": {
        "audit_categories": {
          "description": "List of audit categories", 
          "required": true, 
          "type": "array", 
          "id": "audit_categories", 
          "items": {
            "id": "audit_category", 
            "description": "Information for each audit category", 
            "type": "object", 
            "properties": {
              "name": {
                "description": "Audit category name", 
                "required": true, 
                "type": "string"
              }, 
              "description": {
                "description": "Description of events captured by this audit category", 
                "required": true, 
                "type": "string"
              }, 
              "audit_type": {
                "description": "Audit categories", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "AUTHENTICATION", 
                  "CAPTURE_JOBS", 
                  "CRYPTOGRAPHY", 
                  "COMMUNICATIONS", 
                  "FILE_OPERATIONS", 
                  "LICENSING", 
                  "SETTINGS", 
                  "SYSTEM_OPERATIONS", 
                  "USER_MANAGEMENT", 
                  "VIEWS", 
                  "WATCHES"
                ]
              }, 
              "min_remote_server_level": {
                "description": "Audit levels for each audit category", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "INFO", 
                  "ERROR", 
                  "DISABLED"
                ]
              }, 
              "min_syslog_level": {
                "description": "Audit levels for each audit category", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "INFO", 
                  "ERROR", 
                  "DISABLED"
                ]
              }
            }
          }
        }
      }
    }, 
    "notification_settings": {
      "description": "Configuration for email notifications", 
      "type": "object", 
      "id": "notification_settings", 
      "properties": {
        "mail": {
          "description": "SMTP settings for email notifications", 
          "required": false, 
          "type": "object", 
          "id": "smtp_config", 
          "properties": {
            "from_address": {
              "description": "SMTP 'from' setting", 
              "required": true, 
              "type": "string"
            }, 
            "to_address": {
              "description": "SMTP 'to' setting", 
              "required": true, 
              "type": "string"
            }, 
            "smtp_server_address": {
              "description": "SMTP server IP address", 
              "required": true, 
              "type": "string"
            }, 
            "smtp_server_port": {
              "description": "SMTP server port (defaults to 25)", 
              "required": false, 
              "type": "number"
            }
          }
        }, 
        "notifier": {
          "description": "Email notification settings", 
          "required": true, 
          "type": "object", 
          "id": "notifier_config", 
          "properties": {
            "enabled": {
              "description": "'true' if notifications are enabled, 'false' otherwise", 
              "required": true, 
              "type": "boolean"
            }, 
            "notifications": {
              "description": "A list of notification descriptors", 
              "required": true, 
              "type": "array", 
              "id": "notifications", 
              "items": {
                "id": "notification", 
                "type": "object", 
                "properties": {
                  "id": {
                    "description": "Unique ID for the notification (assigned by the system)", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "description": {
                    "description": "(Optional) Description for the notification", 
                    "required": false, 
                    "type": "string"
                  }, 
                  "enabled": {
                    "description": "'true' if notification is enabled, 'false' otherwise", 
                    "required": true, 
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    }, 
    "snmp_settings": {
      "description": "SNMP configuration for this Shark", 
      "type": "object", 
      "id": "snmp_settings", 
      "properties": {
        "enabled": {
          "description": "'true' if SNMP is enabled, 'false' otherwise", 
          "required": true, 
          "type": "boolean"
        }, 
        "version": {
          "description": "SNMP version", 
          "required": true, 
          "type": "string", 
          "enum": [
            "V1", 
            "V2C", 
            "V3"
          ]
        }, 
        "location": {
          "description": "(Optional) SNMP location string", 
          "required": false, 
          "type": "string"
        }, 
        "description": {
          "description": "(Optional) SNMP description string", 
          "required": false, 
          "type": "string"
        }, 
        "contact": {
          "description": "(Optional) SNMP contact string", 
          "required": false, 
          "type": "string"
        }, 
        "username": {
          "description": "(Required for V3) SNMP user name", 
          "required": false, 
          "type": "string"
        }, 
        "community": {
          "description": "(Required for V1 and V2C) SNMP community string", 
          "required": false, 
          "type": "string"
        }, 
        "security_level": {
          "description": "(Required for V3) SNMP security level", 
          "required": false, 
          "type": "string", 
          "enum": [
            "NO_AUTH_NO_PRIVACY", 
            "AUTH_NO_PRIVACY", 
            "AUTH_PRIVACY"
          ]
        }, 
        "authentication": {
          "description": "(Required with SNMP authentication) SNMP authentication information", 
          "required": false, 
          "type": "object", 
          "properties": {
            "passphrase": {
              "description": "Authentication passphrase (must be at least 8 characters long)", 
              "required": true, 
              "type": "string"
            }, 
            "protocol": {
              "description": "Authentication protocol", 
              "required": true, 
              "type": "string", 
              "enum": [
                "MD5", 
                "SHA"
              ]
            }
          }
        }, 
        "privacy": {
          "description": "(Required with SNMP privacy) SNMP privacy information", 
          "required": false, 
          "type": "object", 
          "properties": {
            "passphrase": {
              "description": "Privacy passphrase (must be at least 8 characters long)", 
              "required": true, 
              "type": "string"
            }, 
            "protocol": {
              "description": "Privacy protocol", 
              "required": true, 
              "type": "string", 
              "enum": [
                "DES", 
                "AES"
              ]
            }
          }
        }
      }
    }, 
    "profilerexport_settings": {
      "description": "Configuration of the Profiler Export", 
      "type": "object", 
      "id": "profilerexport_settings", 
      "properties": {
        "enabled": {
          "description": "Enable/disable the Profiler Export", 
          "required": true, 
          "type": "boolean"
        }, 
        "valid_license": {
          "required": false, 
          "type": "boolean"
        }, 
        "profilers": {
          "description": "List of profilers", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "profiler", 
            "type": "object", 
            "properties": {
              "address": {
                "description": "Address of a profiler, either IP or full qualified name", 
                "required": true, 
                "type": "string"
              }, 
              "status": {
                "description": "Information on a profiler connection", 
                "required": false, 
                "type": "object", 
                "id": "status", 
                "properties": {
                  "state": {
                    "description": "Connection state of a profiler", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "OK", 
                      "ERROR", 
                      "DISABLED"
                    ]
                  }, 
                  "cause": {
                    "description": "In case of connection error this field contains the cause", 
                    "required": false, 
                    "type": "string"
                  }
                }
              }
            }, 
            "description": "Description of a single profiler"
          }
        }, 
        "adapter_ports": {
          "description": "List of the capture physical ports installed on the appliance", 
          "required": true, 
          "type": "array", 
          "items": {
            "id": "adapter_port", 
            "type": "object", 
            "properties": {
              "enabled": {
                "description": "Enable/disable the export on the capture port", 
                "required": true, 
                "type": "boolean"
              }, 
              "name": {
                "description": "Name of the capture port, unique on the appliance", 
                "required": true, 
                "type": "string"
              }, 
              "description": {
                "description": "Description of the capture port", 
                "required": false, 
                "type": "string"
              }, 
              "bpf_filter": {
                "description": "BPF filter applied on the traffic captured on the capture port", 
                "required": false, 
                "type": "string"
              }, 
              "voip_enabled": {
                "description": "Enable/disable the export of VoIP metrics to profiler", 
                "required": true, 
                "type": "boolean"
              }
            }, 
            "description": "Description of a single physical capture port"
          }
        }
      }
    }, 
    "license": {
      "description": "Information for a Shark license", 
      "type": "object", 
      "id": "license", 
      "properties": {
        "key": {
          "description": "License key for this license", 
          "required": true, 
          "type": "string"
        }, 
        "status": {
          "description": "Status of this license", 
          "required": true, 
          "type": "string", 
          "enum": [
            "INVALID", 
            "VALID", 
            "VALID_SOON", 
            "FUTURE", 
            "EXPIRED_SOON", 
            "EXPIRED", 
            "SUPERSEDED", 
            "UNKNOWN"
          ]
        }, 
        "is_platform": {
          "description": "'true' if this is a platform license", 
          "required": true, 
          "type": "boolean"
        }, 
        "feature_name": {
          "description": "Feature covered by this license", 
          "required": true, 
          "type": "string"
        }, 
        "feature_description": {
          "description": "Description of feature covered by this license", 
          "required": true, 
          "type": "string"
        }, 
        "valid_from": {
          "description": "Date/time (seconds from epoch) at which this license becomes valid (0 if always valid)", 
          "required": true, 
          "type": "string"
        }, 
        "valid_to": {
          "description": "Date/time (seconds from epoch) at which this license expires (0 if always valid)", 
          "required": true, 
          "type": "string"
        }
      }
    }
  }, 
  "resources": {
    "interfaces": {
      "methods": {
        "List interfaces": {
          "path": "interfaces", 
          "parameters": {
            "filter": {
              "type": "string", 
              "description": "'device' to limit list to physical devices; 'virtual' to limit list to virtual files; 'aggregating' to limit list to aggregating ports.", 
              "required": false
            }
          }, 
          "httpmethod": "GET", 
          "description": "List of Shark interfaces.", 
          "response": {
            "type": "array", 
            "description": "List of interfaces on this Shark", 
            "id": "interfaces", 
            "items": {
              "id": "interface", 
              "$ref": "interface"
            }
          }
        }, 
        "Get interface info": {
          "path": "interfaces/{interface_id}", 
          "httpmethod": "GET", 
          "description": "Information on Shark interface {interface_id}.", 
          "parameters": {
            "interface_id": {
              "type": "string", 
              "description": "Interface identifier", 
              "required": true
            }
          }, 
          "response": {
            "$ref": "interface"
          }
        }, 
        "Update interface settings": {
          "path": "interfaces/{interface_id}", 
          "httpmethod": "PUT", 
          "description": "Update information on Shark interface {interface_id}.  NOTE: Only physical ('device') interface settings may be updated.", 
          "parameters": {
            "interface_id": {
              "type": "string", 
              "description": "Interface identifier", 
              "required": true
            }
          }, 
          "request": {
            "description": "Update information for a Shark physical interface. Note: If new passthru mode setting is present, all other settings are ignored.", 
            "type": "object", 
            "id": "interface_settings", 
            "properties": {
              "pass_thru": {
                "description": "New passthru mode status", 
                "required": false, 
                "type": "string", 
                "enum": [
                  "ENABLED", 
                  "DISABLED", 
                  "NOT_SUPPORTED"
                ]
              }, 
              "board_speed": {
                "description": "Speed, duplex type, and status of a speed option", 
                "required": false, 
                "type": "object", 
                "properties": {
                  "status": {
                    "description": "Status of this link speed option for this interface", 
                    "required": false, 
                    "type": "string", 
                    "enum": [
                      "SUPPORTED", 
                      "ENABLED", 
                      "NEGOTIATED"
                    ]
                  }, 
                  "duplex_type": {
                    "description": "Duplex type for this speed option", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "HALF", 
                      "FULL", 
                      "UNKNOWN"
                    ]
                  }, 
                  "speed_mbps": {
                    "description": "Throughput for this speed option", 
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "MBPS_10", 
                      "MBPS_100", 
                      "MBPS_1000", 
                      "MBPS_10000"
                    ]
                  }
                }
              }, 
              "tap_type": {
                "description": "New tap type setting", 
                "required": false, 
                "type": "string", 
                "enum": [
                  "NONE", 
                  "CPACKET", 
                  "GIGAMON_HEADER", 
                  "GIGAMON_TRAILER", 
                  "GIGAMON_TRAILER_X12", 
                  "VSS", 
                  "VSS_PORT_ID", 
                  "UNKNOWN"
                ]
              }, 
              "dedup_status": {
                "description": "New packet deduplication setting", 
                "required": false, 
                "type": "string", 
                "enum": [
                  "ENABLED", 
                  "DISABLED", 
                  "NOT_SUPPORTED"
                ]
              }, 
              "speed_options": {
                "description": "List of link speed options", 
                "required": false, 
                "type": "array", 
                "items": {
                  "id": "link_speed_option", 
                  "type": "object", 
                  "properties": {
                    "status": {
                      "description": "Status of this link speed option for this interface", 
                      "required": false, 
                      "type": "string", 
                      "enum": [
                        "SUPPORTED", 
                        "ENABLED", 
                        "NEGOTIATED"
                      ]
                    }, 
                    "duplex_type": {
                      "description": "Duplex type for this speed option", 
                      "required": true, 
                      "type": "string", 
                      "enum": [
                        "HALF", 
                        "FULL", 
                        "UNKNOWN"
                      ]
                    }, 
                    "speed_mbps": {
                      "description": "Throughput for this speed option", 
                      "required": true, 
                      "type": "string", 
                      "enum": [
                        "MBPS_10", 
                        "MBPS_100", 
                        "MBPS_1000", 
                        "MBPS_10000"
                      ]
                    }
                  }, 
                  "description": "Speed, duplex type, and status of a speed option"
                }
              }
            }
          }
        }, 
        "Update interface blink status": {
          "path": "interfaces/{interface_id}/blink_status", 
          "httpmethod": "PUT", 
          "description": "Request update of interface blink status.", 
          "parameters": {
            "interface_id": {
              "type": "string", 
              "description": "Interface identifier", 
              "required": true
            }
          }, 
          "request": {
            "description": "Update interface 'blink' status", 
            "type": "object", 
            "id": "blink_settings", 
            "properties": {
              "blink_status": {
                "description": "New 'blink' status for this interface", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "ON", 
                  "OFF", 
                  "UNKNOWN"
                ]
              }
            }
          }
        }
      }
    }, 
    "jobs": {
      "methods": {
        "List jobs": {
          "path": "jobs", 
          "httpmethod": "GET", 
          "description": "Get the current list of capture jobs", 
          "response": {
            "type": "array", 
            "description": "List of capture jobs", 
            "id": "jobs", 
            "items": {
              "id": "job", 
              "description": "A capture job", 
              "type": "object", 
              "properties": {
                "id": {
                  "description": "Job ID", 
                  "required": true, 
                  "type": "string"
                }, 
                "status": {
                  "description": "Status information for this job", 
                  "required": true, 
                  "$ref": "job_status"
                }, 
                "config": {
                  "description": "Configuration information for this job", 
                  "required": true, 
                  "$ref": "job_config"
                }, 
                "index": {
                  "description": "Index information for this job", 
                  "required": false, 
                  "$ref": "job_index_info"
                }
              }
            }
          }
        }, 
        "Create job": {
          "path": "jobs", 
          "httpmethod": "POST", 
          "description": "Create a new capture job", 
          "request": {
            "$ref": "job_config"
          }, 
          "response": {
            "description": "Information for a new job", 
            "type": "object", 
            "id": "job", 
            "properties": {
              "id": {
                "description": "Job id", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Get job information": {
          "path": "jobs/{job_id}", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Get information (status and config) for a capture job", 
          "response": {
            "description": "A capture job", 
            "type": "object", 
            "id": "job", 
            "properties": {
              "id": {
                "description": "Job ID", 
                "required": true, 
                "type": "string"
              }, 
              "status": {
                "description": "Status information for this job", 
                "required": true, 
                "$ref": "job_status"
              }, 
              "config": {
                "description": "Configuration information for this job", 
                "required": true, 
                "$ref": "job_config"
              }, 
              "index": {
                "description": "Index information for this job", 
                "required": false, 
                "$ref": "job_index_info"
              }
            }
          }
        }, 
        "Get job config": {
          "path": "jobs/{job_id}/config", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Get configuration for capture job", 
          "response": {
            "$ref": "job_config"
          }
        }, 
        "Get job status": {
          "path": "jobs/{job_id}/status", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Get status information for a capture job", 
          "response": {
            "$ref": "job_status"
          }
        }, 
        "Get job stats": {
          "path": "jobs/{job_id}/stats", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Statistics for a capture job", 
          "response": {
            "type": "object", 
            "id": "job_stats", 
            "properties": {
              "packets_written": {
                "required": true, 
                "type": "object", 
                "properties": {
                  "total": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_second": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_minute": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_hour": {
                    "required": true, 
                    "type": "string"
                  }
                }
              }, 
              "packets_dropped": {
                "required": true, 
                "type": "object", 
                "properties": {
                  "total": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_second": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_minute": {
                    "required": true, 
                    "type": "string"
                  }, 
                  "last_hour": {
                    "required": true, 
                    "type": "string"
                  }
                }
              }
            }
          }
        }, 
        "Get job index status": {
          "path": "jobs/{job_id}/index", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Index information for capture job.", 
          "response": {
            "$ref": "job_index_info"
          }
        }, 
        "Update job configuration": {
          "path": "jobs/{job_id}", 
          "httpmethod": "PUT", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Update configuration of a capture job", 
          "request": {
            "$ref": "job_config"
          }
        }, 
        "Update job status": {
          "path": "jobs/{job_id}/status", 
          "httpmethod": "PUT", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Update running status of capture job", 
          "request": {
            "description": "Update job state, optionally clear packets for job", 
            "type": "object", 
            "id": "status", 
            "properties": {
              "state": {
                "description": "Running state of a capture job", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "ACTIVE", 
                  "RUNNING", 
                  "STOPPED", 
                  "UNKNOWN"
                ]
              }, 
              "clear_packets": {
                "description": "'true' to clear packets for this job", 
                "required": false, 
                "type": "boolean"
              }
            }
          }
        }, 
        "Delete job": {
          "path": "jobs/{job_id}", 
          "httpmethod": "DELETE", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Delete capture job"
        }
      }
    }, 
    "clips": {
      "methods": {
        "List clips": {
          "path": "clips", 
          "httpmethod": "GET", 
          "description": "List of trace clips from capture job {job_id}", 
          "response": {
            "type": "array", 
            "description": "List of clips", 
            "id": "clips", 
            "items": {
              "id": "clip", 
              "description": "Description and status of trace clip", 
              "type": "object", 
              "properties": {
                "id": {
                  "description": "Clip id", 
                  "required": true, 
                  "type": "string"
                }, 
                "status": {
                  "description": "Status information for this clip", 
                  "required": true, 
                  "$ref": "clip_status"
                }, 
                "config": {
                  "description": "Configuration information for this clip", 
                  "required": true, 
                  "$ref": "clip_config"
                }, 
                "index": {
                  "description": "Index information for this clip", 
                  "required": false, 
                  "$ref": "index_info"
                }
              }
            }
          }
        }, 
        "Create clip": {
          "path": "clips", 
          "httpmethod": "POST", 
          "description": "Create a new trace clip from capture job {job_id}", 
          "request": {
            "$ref": "clip_config"
          }, 
          "response": {
            "type": "object", 
            "id": "clip", 
            "properties": {
              "id": {
                "description": "Identifier of the newly created clip", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Get clip detail": {
          "path": "clips/{clip_id}", 
          "httpmethod": "GET", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Info on clip {clip_id} from capture job {job_id}", 
          "response": {
            "description": "Description and status of trace clip", 
            "type": "object", 
            "id": "clip", 
            "properties": {
              "id": {
                "description": "Clip id", 
                "required": true, 
                "type": "string"
              }, 
              "status": {
                "description": "Status information for this clip", 
                "required": true, 
                "$ref": "clip_status"
              }, 
              "config": {
                "description": "Configuration information for this clip", 
                "required": true, 
                "$ref": "clip_config"
              }, 
              "index": {
                "description": "Index information for this clip", 
                "required": false, 
                "$ref": "index_info"
              }
            }
          }
        }, 
        "Update clip": {
          "path": "clips/{clip_id}", 
          "httpmethod": "PUT", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Update config info for clip {clip_id} from capture job {job_id}", 
          "request": {
            "$ref": "clip_config"
          }
        }, 
        "Delete clip": {
          "path": "clips/{clip_id}", 
          "httpmethod": "DELETE", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Delete clip {clip_id} from capture job {job_id}"
        }, 
        "Get clip config": {
          "path": "clips/{clip_id}/config", 
          "httpmethod": "GET", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Config info for clip {clip_id} from capture job {job_id}", 
          "response": {
            "$ref": "clip_config"
          }
        }, 
        "Get clip status": {
          "path": "clips/{clip_id}/status", 
          "httpmethod": "GET", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Status info for clip {clip_id} from capture job {job_id}", 
          "response": {
            "$ref": "clip_status"
          }
        }, 
        "Update clip lock status": {
          "path": "clips/{clip_id}/status", 
          "httpmethod": "PUT", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Update lock status for clip {clip_id} from capture job {job_id}", 
          "request": {
            "type": "object", 
            "id": "status", 
            "properties": {
              "locked": {
                "description": "'true' to lock the packets and the index for this clip, 'false' otherwise", 
                "required": true, 
                "type": "boolean"
              }
            }
          }
        }, 
        "Get clip index info": {
          "path": "clips/{clip_id}/index", 
          "httpmethod": "GET", 
          "parameters": {
            "clip_id": {
              "type": "string", 
              "description": "Clip identifier", 
              "required": true
            }
          }, 
          "description": "Index info for clip {clip_id} from capture job {job_id}", 
          "response": {
            "$ref": "index_info"
          }
        }, 
        "List job exports": {
          "path": "jobs/{job_id}/exports", 
          "httpmethod": "GET", 
          "parameters": {
            "job_id": {
              "type": "string", 
              "description": "Job identifier", 
              "required": true
            }
          }, 
          "description": "Get list of current export operations from a capture job", 
          "response": {
            "type": "array", 
            "description": "List of exports currently under way", 
            "id": "exports", 
            "items": {
              "id": "export", 
              "$ref": "export"
            }
          }
        }
      }
    }, 
    "filesystem": {
      "methods": {
        "List root directory": {
          "path": "fs", 
          "httpmethod": "GET", 
          "description": "Listing of root user file directory", 
          "response": {
            "type": "array", 
            "description": "List of directories", 
            "id": "fs", 
            "items": {
              "id": "dir", 
              "$ref": "dir"
            }
          }
        }, 
        "List directory": {
          "path": "fs/{directory_path}", 
          "parameters": {
            "directory_id": {
              "type": "string", 
              "description": "Directory path", 
              "required": true
            }, 
            "recursive": {
              "type": "string", 
              "description": "'true' for recursive directory listing, 'false' otherwise.", 
              "required": false
            }, 
            "details": {
              "type": "string", 
              "description": "'true' for details on all files, 'false' otherwise.", 
              "required": false
            }
          }, 
          "httpmethod": "GET", 
          "description": "Get information on directory {directory_id}.", 
          "response": {
            "$ref": "dir"
          }
        }, 
        "Create file or directory": {
          "path": "fs/{directory_id}", 
          "httpmethod": "POST", 
          "description": "Create trace file, merged file, multisegment file, or directory on the Shark. The file path is specified in the 'Content-Disposition' HTTP header and the file type to be created is specified using the 'Content-Type' HTTP header.", 
          "parameters": {
            "directory_id": {
              "type": "string", 
              "description": "The directory in which the file or directory is to be created", 
              "required": true
            }
          }, 
          "headers": {
            "Content-Type": {
              "type": "string", 
              "description": "The type of object to be created", 
              "required": true
            }, 
            "Content-Disposition": {
              "type": "string", 
              "description": "The name of the file or directory to be created", 
              "required": true
            }
          }, 
          "altrequests": [
            {
              "header": "Content-Type: application/x-vnd.tcpdump", 
              "description": "Create trace file", 
              "request": {
                "type": "data", 
                "content_type": "application/x-vnd.tcpdump", 
                "description": "File contents"
              }
            }, 
            {
              "header": "Content-Type: x-shark-directory", 
              "description": "Create directory"
            }, 
            {
              "header": "Content-Type: application/json or text/xml", 
              "request": {
                "description": "Contains info about a new multisegment or merged file", 
                "type": "object", 
                "id": "aggregated", 
                "properties": {
                  "type": {
                    "required": true, 
                    "type": "string", 
                    "description": "File type", 
                    "enum": [
                      "MULTISEGMENT_FILE", 
                      "MERGED_FILE"
                    ]
                  }, 
                  "linked_sources": {
                    "description": "Linked sources details list", 
                    "required": true, 
                    "type": "array", 
                    "items": {
                      "id": "linked_source", 
                      "type": "object", 
                      "properties": {
                        "path": {
                          "description": "Linked source path. It could be either an absolute path (fs/ID) or a relative path starting from the aggregated file folder.", 
                          "required": true, 
                          "type": "string"
                        }, 
                        "default_source": {
                          "description": "The default source is the reference source in a multisegment file collection and it is used as reference for the time skew calculation", 
                          "required": false, 
                          "type": "boolean"
                        }, 
                        "timeskew": {
                          "description": "It is the packets timestamps offset associated with the linked source", 
                          "required": false, 
                          "type": "number"
                        }, 
                        "description": {
                          "description": "A simple description field associated with the linked source", 
                          "required": false, 
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }, 
              "description": "Create virtual file"
            }
          ]
        }, 
        "Get file info": {
          "path": "fs/{file_id}", 
          "httpmethod": "GET", 
          "description": "Get descriptive information for file or directory {file_id}", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File or directory path", 
              "required": true
            }
          }, 
          "response": {
            "$ref": "file"
          }
        }, 
        "Download file contents": {
          "path": "fs/{file_id}/download", 
          "httpmethod": "GET", 
          "description": "Download contents of trace file, merged file, or multisegment file {file_id}.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "response": {
            "type": "data", 
            "content_type": "application/x-vnd.tcpdump or application/xml"
          }
        }, 
        "Modify merged or multisegment file": {
          "path": "fs/{file_id}", 
          "httpmethod": "PUT", 
          "description": "Modify merged file or multisegment file {file_id} on the Shark.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "request": {
            "description": "Contains info about a new multisegment or merged file", 
            "type": "object", 
            "id": "aggregated", 
            "properties": {
              "type": {
                "required": true, 
                "type": "string", 
                "description": "File type", 
                "enum": [
                  "MULTISEGMENT_FILE", 
                  "MERGED_FILE"
                ]
              }, 
              "linked_sources": {
                "description": "Linked sources details list", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "linked_source", 
                  "type": "object", 
                  "properties": {
                    "path": {
                      "description": "Linked source path. It could be either an absolute path (fs/ID) or a relative path starting from the aggregated file folder.", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "default_source": {
                      "description": "The default source is the reference source in a multisegment file collection and it is used as reference for the time skew calculation", 
                      "required": false, 
                      "type": "boolean"
                    }, 
                    "timeskew": {
                      "description": "It is the packets timestamps offset associated with the linked source", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "description": {
                      "description": "A simple description field associated with the linked source", 
                      "required": false, 
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }, 
        "Delete file": {
          "path": "fs/{file_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete file {file_id}.  NOTE: If a file to be deleted is open for any reason, the delete operation will fail.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }
        }, 
        "Delete directory": {
          "path": "fs/{directory_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete user directory {directory_id}.  If the directory is not empty, all files in the directory will be deleted as well. NOTE: If a file to be deleted is open for any reason, the delete operation will fail.", 
          "parameters": {
            "directory_id": {
              "type": "string", 
              "description": "Directory path", 
              "required": true
            }
          }
        }, 
        "Get file checksum": {
          "path": "fs/{file_id}/checksum", 
          "httpmethod": "GET", 
          "description": "Obtain a checksum for a trace file.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "response": {
            "description": "Contains info about a checksum calculated on a trace file", 
            "type": "object", 
            "id": "checksum", 
            "properties": {
              "value": {
                "description": "Trace file's checksum", 
                "required": true, 
                "type": "string"
              }, 
              "method": {
                "required": true, 
                "type": "string", 
                "description": "Checksum algorithm", 
                "enum": [
                  "SHA256"
                ]
              }
            }
          }
        }, 
        "Get file index info": {
          "path": "fs/{file_id}/index", 
          "httpmethod": "GET", 
          "description": "Get index information for trace file {file_id}.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "response": {
            "$ref": "index_info"
          }
        }, 
        "Create file index": {
          "path": "fs/{file_id}/index", 
          "httpmethod": "POST", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "description": "Create index for trace file {file_id}"
        }, 
        "Delete file index": {
          "path": "fs/{file_id}/index", 
          "httpmethod": "DELETE", 
          "description": "Delete index for trace file {file_id}.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }
        }, 
        "Move file or directory": {
          "path": "fs/{file_id}/move", 
          "httpmethod": "POST", 
          "description": "Request move of file or directory resource {file_id}", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "request": {
            "description": "Contains the resource's destination id for a move operation", 
            "type": "object", 
            "id": "move", 
            "properties": {
              "destination": {
                "description": "Resource's destination id", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Create timeskew estimate": {
          "path": "fs/{file_id}/fs/timeskew_estimate", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }, 
            "packet_count": {
              "type": "number", 
              "description": "Maximum number of packets to process", 
              "required": false
            }
          }, 
          "httpmethod": "PUT", 
          "description": "Start a timeskew estimation process for multisegment file {file_id}."
        }, 
        "Get timeskew estimate results": {
          "path": "fs/{file_id}/timeskew_estimate", 
          "httpmethod": "GET", 
          "description": "Time skew information for multisegment file {file_id}", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }, 
          "response": {
            "description": "Time skew estimate information", 
            "type": "object", 
            "id": "timeskew_estimate", 
            "properties": {
              "status": {
                "description": "Status information for the time skew estimate", 
                "required": true, 
                "type": "object", 
                "id": "status", 
                "properties": {
                  "state": {
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "EMPTY", 
                      "COMPUTING", 
                      "NO_PACKETS", 
                      "UNIDIRECTIONAL", 
                      "TIMESTAMP_WARNING", 
                      "DUPLICATE_WARNING", 
                      "OK"
                    ]
                  }, 
                  "duplicated_count": {
                    "description": "Number of packets with the same timestamp in different capture points. Check this field in order to estimate if this is a real issue or not: if the number of packets experiencing this problem is high probably at least two files contain the same packets, otherwise it means that for some packets the timeskew observed makes the delay becomes zero (timeskew = delay for that packet).", 
                    "required": false, 
                    "type": "number"
                  }, 
                  "first_invalid_timestamp": {
                    "description": "First timestamp causing the TIMESTAMP_WARNING code", 
                    "required": false, 
                    "$ref": "timestamp-hp"
                  }, 
                  "invalid_source_index": {
                    "description": "Index of the file causing the TIMESTAMP_WARNING code", 
                    "required": false, 
                    "type": "number"
                  }
                }
              }, 
              "results": {
                "description": "List of linked sources", 
                "required": false, 
                "type": "array", 
                "items": {
                  "id": "result", 
                  "description": "Time skew information for a linked source", 
                  "type": "object", 
                  "properties": {
                    "source_index": {
                      "description": "Index of the linked source", 
                      "required": true, 
                      "type": "number"
                    }, 
                    "timeskew": {
                      "description": "Estimated time skew compared to the default source", 
                      "required": true, 
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }, 
        "Delete timeskew estimate": {
          "path": "fs/{file_id}/fs/timeskew_estimate", 
          "httpmethod": "DELETE", 
          "description": "Delete time skew estimate results for multisegment file {file_id}.", 
          "parameters": {
            "file_id": {
              "type": "string", 
              "description": "File path", 
              "required": true
            }
          }
        }
      }
    }, 
    "packet export": {
      "methods": {
        "Start export operation": {
          "path": "{source_type}/{source_id}/exports", 
          "httpmethod": "POST", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }
          }, 
          "description": "Create a new export operation from the given source. This begins the process of extracting packets from the given source and returns a handle through which the caller can obtain status on the operation as well as download the packets themselves.", 
          "request": {
            "$ref": "export_config"
          }, 
          "response": {
            "type": "object", 
            "id": "export_id", 
            "properties": {
              "id": {
                "description": "ID of created export", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "List export operations": {
          "path": "{source_type}/{source_id}/exports", 
          "httpmethod": "GET", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }
          }, 
          "description": "List active export operations from the given source.", 
          "response": {
            "type": "array", 
            "description": "List of exports currently under way", 
            "id": "exports", 
            "items": {
              "id": "export", 
              "$ref": "export"
            }
          }
        }, 
        "Get export operation status": {
          "path": "{source_type}/{source_id}/exports/{export_id}", 
          "httpmethod": "GET", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }, 
            "export_id": {
              "type": "string", 
              "description": "Export operation identifier.", 
              "required": true
            }
          }, 
          "description": "Get status of an export operation", 
          "response": {
            "$ref": "export"
          }
        }, 
        "Stop export operation": {
          "path": "{source_type}/{source_id}/exports/{export_id}", 
          "httpmethod": "DELETE", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }, 
            "export_id": {
              "type": "string", 
              "description": "Export operation identifier.", 
              "required": true
            }
          }, 
          "description": "Stop an export operation"
        }, 
        "Get job export packets": {
          "path": "{source_type}/{source_id}/exports/{export_id}/packets", 
          "httpmethod": "GET", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }, 
            "export_id": {
              "type": "string", 
              "description": "Export operation identifier.", 
              "required": true
            }
          }, 
          "description": "Get the packet stream for an export operation.", 
          "response": {
            "type": "data", 
            "content_type": "application/vnd.tcpdump.pcap", 
            "description": "Packet data"
          }
        }, 
        "Download job packets": {
          "path": "{source_type}/{source_id}/packets", 
          "parameters": {
            "source_type": {
              "type": "string", 
              "description": "Packet source type identifier. Must be one of \"interfaces\", \"jobs\", \"clips\", or \"fs\".", 
              "required": true
            }, 
            "source_id": {
              "type": "string", 
              "description": "Specific source identifier of type {source_type}. For example, if source_type is \"jobs\", then the {source_id} is the job identifier.", 
              "required": true
            }, 
            "bytes": {
              "type": "number", 
              "description": "Limit on number of bytes to be extracted.", 
              "required": false
            }, 
            "packets": {
              "type": "number", 
              "description": "Limit on number of packets to be extracted.", 
              "required": false
            }, 
            "seconds": {
              "type": "number", 
              "description": "Limit on total time (in seconds) of packet extraction.", 
              "required": false
            }, 
            "filename": {
              "type": "string", 
              "description": "Name of output filename.  This will appear in the 'content-disposition' header of the response.", 
              "required": false
            }, 
            "file_format": {
              "type": "string", 
              "description": "Format of output file: 'PCAP_US' for PCAP format (microsecond resolution); 'PCAP_NS' for PCAP format (nanosecond resolution); 'PCAPNG_US' for PCAP-NG format (microsecond resolution); or 'PCAPNG_NS' for PCAP_NG format (nanosecond resolution).", 
              "required": false
            }
          }, 
          "httpmethod": "GET", 
          "description": "Export packets from a capture job.  Response content type is 'application/vnd.tcpdump.pcap'."
        }
      }
    }, 
    "views": {
      "methods": {
        "List views": {
          "path": "views", 
          "httpmethod": "GET", 
          "description": "Get list of currently running views.", 
          "response": {
            "type": "array", 
            "description": "View list", 
            "id": "views", 
            "items": {
              "id": "view", 
              "type": "object", 
              "properties": {
                "id": {
                  "description": "View ID", 
                  "required": true, 
                  "type": "string"
                }, 
                "creation_time": {
                  "description": "View creation time", 
                  "required": true, 
                  "$ref": "timestamp-hp"
                }, 
                "owner": {
                  "description": "Owner user name", 
                  "required": true, 
                  "type": "string"
                }, 
                "state": {
                  "description": "View state", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "UNINITIALIZED", 
                    "LOADED", 
                    "PARAMS_LOADED", 
                    "INITIALIZED", 
                    "READY", 
                    "RUNNING", 
                    "ERRORS", 
                    "DONE", 
                    "CLOSING", 
                    "PAUSED"
                  ]
                }, 
                "locked": {
                  "description": "True if locked", 
                  "required": true, 
                  "type": "boolean"
                }, 
                "watches": {
                  "description": "Watch list for this view", 
                  "required": true, 
                  "type": "array", 
                  "items": {
                    "id": "watch", 
                    "type": "object", 
                    "properties": {
                      "id": {
                        "description": "Watch Id", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "state": {
                        "description": "Watch state", 
                        "required": true, 
                        "type": "string", 
                        "enum": [
                          "UNINITIALIZED", 
                          "LOADED", 
                          "PARAMS_LOADED", 
                          "INITIALIZED", 
                          "READY", 
                          "RUNNING", 
                          "ERRORS", 
                          "DONE", 
                          "CLOSING", 
                          "PAUSED"
                        ]
                      }, 
                      "last_error": {
                        "description": "Error description, if the watch is in an error state", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "event_count": {
                        "description": "Number of triggered events", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "first_event_time": {
                        "description": "Time of the first triggered event", 
                        "required": true, 
                        "$ref": "timestamp-hp"
                      }, 
                      "last_event_time": {
                        "description": "Time of the last triggered event", 
                        "required": true, 
                        "$ref": "timestamp-hp"
                      }
                    }
                  }
                }
              }, 
              "description": "Summary information for a view"
            }
          }
        }, 
        "Create view": {
          "path": "views", 
          "httpmethod": "POST", 
          "description": "Create a new view.", 
          "request": {
            "$ref": "view"
          }, 
          "response": {
            "description": "ID of the newly created view", 
            "type": "object", 
            "id": "view_id", 
            "properties": {
              "id": {
                "description": "View ID", 
                "required": true, 
                "type": "string"
              }, 
              "data_source_type": {
                "description": "Data source type", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "INDEX", 
                  "PACKETS"
                ]
              }
            }
          }
        }, 
        "Get view configuration": {
          "path": "views/{view_id}", 
          "httpmethod": "GET", 
          "description": "Get configuration for view {view_id}.", 
          "response": {
            "$ref": "view"
          }
        }, 
        "Delete view": {
          "path": "views/{view_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete view {view_id}. This will stop any packet processing and delete the view results."
        }, 
        "Get view output legend": {
          "path": "views/{view_id}/data/{output_id}/legend", 
          "httpmethod": "GET", 
          "description": "Get data legend for the output {output_id} in view {view_id}.", 
          "response": {
            "type": "array", 
            "description": "Output legend", 
            "id": "legend", 
            "items": {
              "id": "label", 
              "type": "object", 
              "properties": {
                "base": {
                  "description": "Base", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "DEC", 
                    "HEX", 
                    "OCT", 
                    "DEC_HEX", 
                    "HEX_DEC", 
                    "PERC"
                  ]
                }, 
                "calculation": {
                  "description": "Calculation", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "SUM", 
                    "MAX", 
                    "MIN", 
                    "AVG", 
                    "TIME_AVG"
                  ]
                }, 
                "dimension": {
                  "description": "True if dimension", 
                  "required": true, 
                  "type": "boolean"
                }, 
                "name": {
                  "description": "Name", 
                  "required": true, 
                  "type": "string"
                }, 
                "description": {
                  "description": "Description", 
                  "required": true, 
                  "type": "string"
                }, 
                "field": {
                  "description": "Field", 
                  "required": true, 
                  "type": "string"
                }, 
                "id": {
                  "description": "Id", 
                  "required": true, 
                  "type": "string"
                }, 
                "type": {
                  "description": "Type", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "PROTOCOL", 
                    "BOOLEAN", 
                    "UINT8", 
                    "UINT16", 
                    "UINT24", 
                    "UINT32", 
                    "UINT64", 
                    "INT8", 
                    "INT16", 
                    "INT24", 
                    "INT32", 
                    "INT64", 
                    "FLOAT", 
                    "DOUBLE", 
                    "ABSOLUTE_TIME", 
                    "RELATIVE_TIME", 
                    "STRING", 
                    "STRINGZ", 
                    "SHORT_STRING", 
                    "UINT_STRING", 
                    "ETHER", 
                    "BYTES", 
                    "UINT_BYTES", 
                    "IPv4", 
                    "IPv6", 
                    "UDP_PORT", 
                    "TCP_PORT", 
                    "IPXNET", 
                    "FRAMENUM", 
                    "PCRE", 
                    "GUID", 
                    "OID", 
                    "NUM_TYPES", 
                    "INDEX", 
                    "EUI64"
                  ]
                }
              }, 
              "description": "Legend Entry"
            }
          }
        }, 
        "Get view output data": {
          "path": "views/{view_id}/data/{output_id}", 
          "description": "Get data for the output {output_id} in view {view_id}.", 
          "parameters": {
            "start": {
              "type": "number", 
              "description": "Timestamp value representing start time.", 
              "required": false
            }, 
            "end": {
              "type": "number", 
              "description": "Timestamp value representing end time.", 
              "required": false
            }, 
            "delta": {
              "type": "string", 
              "description": "Sampling interval, in nanoseconds", 
              "required": false
            }, 
            "aggregated": {
              "type": "string", 
              "description": "'true' if output is in a single sample.", 
              "required": false
            }, 
            "sortby": {
              "type": "string", 
              "description": "Name (x0, x1, etc.) of column used to sort output values.", 
              "required": false
            }, 
            "fromentry": {
              "type": "number", 
              "description": "In paged output: number of first output row. NOTE: Row numbers start from 0.", 
              "required": false
            }, 
            "toentry": {
              "type": "number", 
              "description": "In paged output: number of last output row.", 
              "required": false
            }, 
            "sorttype": {
              "type": "string", 
              "description": "'ascending' or 'descending'", 
              "required": false
            }, 
            "countonly": {
              "type": "number", 
              "description": "(Only available when 'aggregated' = 'true'.) Return number of rows only.", 
              "required": false
            }
          }, 
          "httpmethod": "GET", 
          "response": {
            "description": "View output", 
            "xmlSchema": {
              "samples": {
                "children": {
                  "sample": {
                    "attributes": {
                      "t": "timestamp-hp", 
                      "p": "number", 
                      "u": "number", 
                      "value_count": "number", 
                      "value_sum": "number"
                    }, 
                    "children": {
                      "val": {
                        "attributes": {
                          "x0": "string", 
                          "x1": "string", 
                          "x2": "string", 
                          "x3": "string", 
                          "...": "string"
                        }
                      }
                    }
                  }, 
                  "gap": {
                    "attributes": {
                      "t1": "number", 
                      "t2": "number"
                    }
                  }
                }
              }
            }, 
            "type": "object", 
            "id": "samples", 
            "properties": {
              "samples": {
                "required": true, 
                "type": "array", 
                "description": "Samples list", 
                "id": "samples", 
                "items": {
                  "id": "sample", 
                  "type": "object", 
                  "properties": {
                    "t": {
                      "description": "Sample timestamp", 
                      "required": false, 
                      "$ref": "timestamp-hp"
                    }, 
                    "p": {
                      "description": "Processed packet count", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "u": {
                      "description": "Unprocessed packet count", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "value_count": {
                      "description": "Number of distinct rows", 
                      "notes": "Present only when the output is aggregated", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "value_sum": {
                      "description": "Sum of all the values for the sorting column", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "vals": {
                      "description": "Values list", 
                      "required": true, 
                      "type": "array", 
                      "notes": "In XML, the values list is encoded as <val x0=\"val0\" x1=\"val1\" .../>, where x0..xN correspond to the columns defined in the view configuraton", 
                      "items": {
                        "id": "val", 
                        "type": "array", 
                        "description": "Value", 
                        "items": {
                          "type": "string", 
                          "id": "val"
                        }
                      }
                    }, 
                    "gap_start": {
                      "description": "Timestamp at the start of a data gap, representing a period of time in which there are no output values for the view", 
                      "notes": "If present, then the vals list will be empty. In XML, a gap is encoded as <gap t1=\"start\" t2=\"end\"/>.", 
                      "required": false, 
                      "$ref": "timestamp-hp"
                    }, 
                    "gap_end": {
                      "description": "Timestamp at the end of a data gap, representing a period of time in which there are no output values for the view", 
                      "notes": "If present, then the vals list will be empty. In XML, a gap is encoded as <gap t1=\"start\" t2=\"end\"/>.", 
                      "required": false, 
                      "$ref": "timestamp-hp"
                    }
                  }, 
                  "description": "Sample for a view output"
                }
              }
            }
          }
        }, 
        "Get view statistics": {
          "path": "views/{view_id}/stats", 
          "httpmethod": "GET", 
          "description": "Get processing statistics for view {view_id}.", 
          "response": {
            "description": "View statistics", 
            "type": "object", 
            "id": "stats", 
            "properties": {
              "input_size": {
                "description": "Size (in bytes) of the input source to process", 
                "required": true, 
                "type": "number"
              }, 
              "processed_size": {
                "description": "Size (in bytes) of the input source currently processed", 
                "required": true, 
                "type": "number"
              }, 
              "state": {
                "description": "Handle state", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "UNINITIALIZED", 
                  "LOADED", 
                  "PARAMS_LOADED", 
                  "INITIALIZED", 
                  "READY", 
                  "RUNNING", 
                  "ERRORS", 
                  "DONE", 
                  "CLOSING", 
                  "PAUSED"
                ]
              }, 
              "locked": {
                "description": "True if the view is locked", 
                "required": true, 
                "type": "boolean"
              }, 
              "time_details": {
                "description": "Time details", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "start": {
                    "description": "Output start time. Can be 0 if the output has no data.", 
                    "required": true, 
                    "$ref": "timestamp-hp"
                  }, 
                  "end": {
                    "description": "Output end time. Can be 0 if the output has no data.", 
                    "required": true, 
                    "$ref": "timestamp-hp"
                  }, 
                  "delta": {
                    "description": "Output sampling rate", 
                    "required": true, 
                    "type": "number"
                  }
                }
              }, 
              "data_source_type": {
                "description": "Data source type", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "INDEX", 
                  "PACKETS"
                ]
              }
            }
          }
        }, 
        "Lock view": {
          "path": "views/{view_id}/lock", 
          "httpmethod": "POST", 
          "description": "Lock view {view_id}."
        }, 
        "Unlock view": {
          "path": "views/{view_id}/unlock", 
          "httpmethod": "POST", 
          "description": "Unlock view {view_id}."
        }, 
        "Get view acl": {
          "path": "views/{view_id}/acl", 
          "httpmethod": "GET", 
          "description": "Get access control list for running view {view_id}.", 
          "response": {
            "description": "Access Control List", 
            "type": "object", 
            "id": "acl", 
            "properties": {
              "users": {
                "description": "Users in the access control list", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "user", 
                  "type": "object", 
                  "properties": {
                    "name": {
                      "description": "User name", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "owner": {
                      "description": "True if the user is the owner of the view", 
                      "required": true, 
                      "type": "boolean"
                    }
                  }, 
                  "description": "User in the access list"
                }
              }, 
              "groups": {
                "description": "Groups in the access control list", 
                "required": true, 
                "type": "array", 
                "items": {
                  "type": "string", 
                  "id": "group"
                }
              }
            }
          }
        }, 
        "Update view acl": {
          "path": "views/{view_id}/acl", 
          "httpmethod": "POST", 
          "description": "Modify access control list for running view {view_id}.", 
          "request": {
            "description": "Action type on the access list", 
            "type": "object", 
            "id": "acl_action", 
            "properties": {
              "action": {
                "description": "Action type on the access list", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "ADD_USER", 
                  "REMOVE_USER", 
                  "ADD_GROUP", 
                  "REMOVE_GROUP"
                ]
              }, 
              "value": {
                "description": "User/group name depending on the action type", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }
      }
    }, 
    "watches": {
      "methods": {
        "List watches": {
          "path": "views/{view_id}/watches", 
          "httpmethod": "GET", 
          "description": "List of watches for view {view_id}.", 
          "response": {
            "type": "array", 
            "description": "Watch list", 
            "id": "watches", 
            "items": {
              "id": "watch", 
              "$ref": "watch"
            }
          }
        }, 
        "Create watch": {
          "path": "views/{view_id}/watches", 
          "httpmethod": "POST", 
          "description": "Create a new watch for view {view_id}.", 
          "request": {
            "$ref": "watch"
          }
        }, 
        "Get watch detail": {
          "path": "views/{view_id}/watches/{watch_id}", 
          "httpmethod": "GET", 
          "description": "Config information for watch {watch_id} on view {view_id}.", 
          "response": {
            "$ref": "watch"
          }
        }, 
        "Update watch": {
          "path": "views/{view_id}/watches/{watch_id}", 
          "httpmethod": "PUT", 
          "description": "Update configuration for watch {watch_id} on view {view_id}.", 
          "request": {
            "$ref": "watch"
          }
        }, 
        "Delete watch": {
          "path": "views/{view_id}/watches/{watch_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete watch {watch_id} on view {view_id}."
        }, 
        "Disable watch": {
          "path": "views/{view_id}/watches/{watch_id}/disable", 
          "httpmethod": "POST", 
          "description": "Disable watch {watch_id} on view {view_id}."
        }, 
        "Enable watch": {
          "path": "views/{view_id}/watches/{watch_id}/enable", 
          "httpmethod": "POST", 
          "description": "Enable watch {watch_id} on view {view_id}."
        }
      }
    }, 
    "settings": {
      "methods": {
        "Get basic settings": {
          "path": "settings/basic", 
          "httpmethod": "GET", 
          "description": "Get basic settings.", 
          "response": {
            "$ref": "basic_settings"
          }
        }, 
        "Update basic settings": {
          "path": "settings/basic", 
          "httpmethod": "PUT", 
          "description": "Update basic settings.", 
          "request": {
            "$ref": "basic_settings"
          }
        }, 
        "Get audit settings": {
          "path": "settings/audit", 
          "httpmethod": "GET", 
          "description": "Get audit settings.", 
          "response": {
            "$ref": "audit_settings"
          }
        }, 
        "Update audit settings": {
          "path": "settings/audit", 
          "httpmethod": "PUT", 
          "description": "Update audit settings.", 
          "request": {
            "$ref": "audit_settings"
          }
        }, 
        "Get authentication settings": {
          "path": "settings/auth", 
          "httpmethod": "GET", 
          "description": "Get authentication settings.", 
          "response": {
            "$ref": "auth_settings"
          }
        }, 
        "Update authentication settings": {
          "path": "settings/auth", 
          "httpmethod": "PUT", 
          "description": "Update authentication settings.", 
          "request": {
            "$ref": "auth_settings"
          }
        }, 
        "Get firewall settings": {
          "path": "settings/firewall", 
          "httpmethod": "GET", 
          "description": "Get firewall settings.", 
          "response": {
            "description": "Firewall configuration", 
            "type": "object", 
            "id": "firewall_settings", 
            "properties": {
              "default_policy": {
                "required": true, 
                "type": "string", 
                "description": "Firewall default policy", 
                "enum": [
                  "ACCEPT", 
                  "DROP"
                ]
              }, 
              "firewall_enabled": {
                "description": "Enables or disable the firewall", 
                "required": true, 
                "type": "boolean"
              }, 
              "rules": {
                "description": "Rules list", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "rule", 
                  "type": "object", 
                  "properties": {
                    "description": {
                      "description": "Rule description", 
                      "required": false, 
                      "type": "string"
                    }, 
                    "source": {
                      "description": "Rule IPV4 source address. It can contain a netmasks specified as CIDR format or as IPV4 address.", 
                      "required": false, 
                      "type": "string"
                    }, 
                    "dest_port": {
                      "description": "Rule destination port", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "protocol": {
                      "required": false, 
                      "type": "string", 
                      "description": "Rule protocol", 
                      "enum": [
                        "TCP", 
                        "UDP", 
                        "ICMP", 
                        "ALL"
                      ]
                    }, 
                    "action": {
                      "required": true, 
                      "type": "string", 
                      "description": "Rule action, what the firewall should do with the packet when it matches the rule", 
                      "enum": [
                        "ACCEPT", 
                        "DROP", 
                        "LOG_ACCEPT", 
                        "LOG_DROP"
                      ]
                    }
                  }
                }
              }
            }
          }
        }, 
        "Update firewall settings": {
          "path": "settings/firewall", 
          "httpmethod": "PUT", 
          "description": "Update firewall settings.", 
          "request": {
            "description": "Firewall configuration", 
            "type": "object", 
            "id": "firewall_settings", 
            "properties": {
              "default_policy": {
                "required": true, 
                "type": "string", 
                "description": "Firewall default policy", 
                "enum": [
                  "ACCEPT", 
                  "DROP"
                ]
              }, 
              "firewall_enabled": {
                "description": "Enables or disable the firewall", 
                "required": true, 
                "type": "boolean"
              }, 
              "rules": {
                "description": "Rules list", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "rule", 
                  "type": "object", 
                  "properties": {
                    "description": {
                      "description": "Rule description", 
                      "required": false, 
                      "type": "string"
                    }, 
                    "source": {
                      "description": "Rule IPV4 source address. It can contain a netmasks specified as CIDR format or as IPV4 address.", 
                      "required": false, 
                      "type": "string"
                    }, 
                    "dest_port": {
                      "description": "Rule destination port", 
                      "required": false, 
                      "type": "number"
                    }, 
                    "protocol": {
                      "required": false, 
                      "type": "string", 
                      "description": "Rule protocol", 
                      "enum": [
                        "TCP", 
                        "UDP", 
                        "ICMP", 
                        "ALL"
                      ]
                    }, 
                    "action": {
                      "required": true, 
                      "type": "string", 
                      "description": "Rule action, what the firewall should do with the packet when it matches the rule", 
                      "enum": [
                        "ACCEPT", 
                        "DROP", 
                        "LOG_ACCEPT", 
                        "LOG_DROP"
                      ]
                    }
                  }
                }
              }
            }
          }
        }, 
        "Get profiler export settings": {
          "path": "settings/profiler_export", 
          "httpmethod": "GET", 
          "description": "Get profiler export settings.", 
          "response": {
            "$ref": "profilerexport_settings"
          }
        }, 
        "Update profiler export settings": {
          "path": "settings/profiler_export", 
          "httpmethod": "PUT", 
          "description": "Update profiler export settings.", 
          "request": {
            "$ref": "profilerexport_settings"
          }
        }, 
        "Get snmp settings": {
          "path": "settings/snmp", 
          "httpmethod": "GET", 
          "description": "Get SNMP settings.", 
          "response": {
            "$ref": "snmp_settings"
          }
        }, 
        "Update snmp settings": {
          "path": "settings/snmp", 
          "httpmethod": "PUT", 
          "description": "Update SNMP settings.", 
          "request": {
            "$ref": "snmp_settings"
          }
        }, 
        "Get notification settings": {
          "path": "settings/notification", 
          "httpmethod": "GET", 
          "description": "Management daemon configuration parameters.", 
          "response": {
            "$ref": "notification_settings"
          }
        }, 
        "Update notification settings": {
          "path": "settings/notification", 
          "httpmethod": "PUT", 
          "description": "Update management daemon configuration parameters.", 
          "request": {
            "$ref": "notification_settings"
          }
        }, 
        "List cors domains": {
          "path": "settings/cors_domains", 
          "httpmethod": "GET", 
          "description": "List of domains enabled for Cross Origin Resource Sharing.", 
          "response": {
            "type": "array", 
            "description": "List of CORS (Cross-Origin Resource Sharing) domains", 
            "id": "cors_domains", 
            "items": {
              "type": "string", 
              "id": "domain"
            }
          }
        }, 
        "Update cors domains": {
          "path": "settings/cors_domains", 
          "httpmethod": "PUT", 
          "description": "Update list of domains enabled for Cross Origin Resource Sharing.", 
          "request": {
            "type": "array", 
            "description": "List of CORS (Cross-Origin Resource Sharing) domains", 
            "id": "cors_domains", 
            "items": {
              "type": "string", 
              "id": "domain"
            }
          }
        }, 
        "Get protocol groups": {
          "path": "settings/protocol_groups", 
          "httpmethod": "GET", 
          "description": "Get protocol group settings as a text file.", 
          "response": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol group settings."
          }
        }, 
        "Update protocol groups": {
          "path": "settings/protocol_groups", 
          "httpmethod": "PUT", 
          "description": "Update protocol group settings by uploading a text file with the new settings.", 
          "request": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol group settings."
          }
        }, 
        "Get protocol names": {
          "path": "settings/protocol_names", 
          "httpmethod": "GET", 
          "description": "Get protocol name settings as a text file.", 
          "response": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol group settings."
          }
        }, 
        "Update protocol names": {
          "path": "settings/protocol_names", 
          "httpmethod": "PUT", 
          "description": "Update protocol name settings by uploading a text file with the new settings.", 
          "request": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol name settings."
          }
        }, 
        "Get raw settings": {
          "path": "settings/raw", 
          "httpmethod": "GET", 
          "description": "Get advanced settings as a text file.", 
          "response": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol group settings."
          }
        }, 
        "Update raw settings": {
          "path": "settings/raw", 
          "httpmethod": "PUT", 
          "description": "Update advanced  settings by uploading a text file with the new settings.", 
          "request": {
            "type": "data", 
            "content_type": "text/plain", 
            "description": "Text file of protocol name settings."
          }
        }
      }
    }, 
    "licenses": {
      "methods": {
        "List licenses": {
          "path": "settings/licenses", 
          "httpmethod": "GET", 
          "description": "List licenses on the system.", 
          "response": {
            "type": "array", 
            "description": "List of licenses currently in system", 
            "id": "licenses", 
            "items": {
              "id": "license", 
              "$ref": "license"
            }
          }
        }, 
        "Add licenses": {
          "path": "settings/licenses", 
          "httpmethod": "POST", 
          "description": "Add a set of licenses to the system.", 
          "request": {
            "type": "array", 
            "description": "List of license keys to add to the system", 
            "id": "licenses", 
            "items": {
              "type": "string", 
              "id": "license"
            }
          }, 
          "response": {
            "type": "array", 
            "description": "List of new licenses added to the system", 
            "id": "licenses", 
            "items": {
              "id": "license", 
              "type": "object", 
              "properties": {
                "key": {
                  "description": "New license key added to the system", 
                  "required": true, 
                  "type": "string"
                }, 
                "url": {
                  "description": "Resource URI for the new license key", 
                  "required": true, 
                  "type": "string"
                }, 
                "status": {
                  "description": "Status of the new license", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "INVALID", 
                    "VALID", 
                    "VALID_SOON", 
                    "FUTURE", 
                    "EXPIRED_SOON", 
                    "EXPIRED", 
                    "SUPERSEDED", 
                    "UNKNOWN"
                  ]
                }
              }, 
              "description": "Description of a new license added to the system"
            }
          }
        }, 
        "Get license detail": {
          "path": "settings/licenses/{license_key}", 
          "httpmethod": "GET", 
          "description": "Get information on license {license_key}.", 
          "response": {
            "$ref": "license"
          }
        }, 
        "Delete license": {
          "path": "settings/licenses/{license_key}", 
          "httpmethod": "DELETE", 
          "description": "Delete license {license_key}."
        }, 
        "Get license status": {
          "path": "settings/licenses/status", 
          "httpmethod": "GET", 
          "description": "Get current licensing status of this Shark VE.", 
          "response": {
            "description": "License status information for this Shark VE", 
            "type": "object", 
            "id": "license_status", 
            "properties": {
              "application_status": {
                "description": "License status for this Shark VE", 
                "required": true, 
                "type": "string", 
                "enum": [
                  "LICENSED_PHYSICAL", 
                  "LICENSED", 
                  "UNLICENSED_SOON", 
                  "UNLICENSED", 
                  "UNKNOWN"
                ]
              }, 
              "num_profilers": {
                "description": "Number of profilers supported for export", 
                "required": true, 
                "type": "number"
              }, 
              "profiler_export_capacity": {
                "description": "Export capacity (MBPS) for profiler export", 
                "required": true, 
                "type": "number"
              }, 
              "packet_storage_size": {
                "description": "Packet storage capacity (GB)", 
                "required": true, 
                "type": "number"
              }, 
              "enterprise_pilot_level": {
                "description": "Enterprise Pilot level", 
                "required": true, 
                "type": "number"
              }
            }
          }
        }, 
        "Generate license request key": {
          "path": "settings/licenses/request", 
          "httpmethod": "POST", 
          "description": "Request license request code.", 
          "request": {
            "description": "Submit a new license request", 
            "type": "object", 
            "id": "license_token", 
            "properties": {
              "token": {
                "description": "License request token (obtained from Riverbed customer support)", 
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "response": {
            "type": "object", 
            "id": "license_request", 
            "properties": {
              "license_req": {
                "description": "License request string (to be submitted to Riverbed customer support)", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }
      }
    }, 
    "certificates": {
      "methods": {
        "List certificates": {
          "path": "settings/certificates", 
          "httpmethod": "GET", 
          "description": "List of certificates in the Shark.", 
          "response": {
            "description": "Certificates info,", 
            "type": "object", 
            "id": "certificates", 
            "properties": {
              "web_certificate": {
                "description": "Certificate's info", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "issued_to": {
                    "description": "Certificate's details", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "common_name": {
                        "description": "Subject's common name", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "email": {
                        "description": "Subject's email", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization": {
                        "description": "Subject's organization", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization_unit": {
                        "description": "Subject's organization unit", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "locality": {
                        "description": "Subject's locality", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "state": {
                        "description": "Subject's state (2 letters code)", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "country": {
                        "description": "Subject's state", 
                        "required": true, 
                        "type": "string"
                      }
                    }
                  }, 
                  "issued_by": {
                    "description": "Certificate's details", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "common_name": {
                        "description": "Subject's common name", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "email": {
                        "description": "Subject's email", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization": {
                        "description": "Subject's organization", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization_unit": {
                        "description": "Subject's organization unit", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "locality": {
                        "description": "Subject's locality", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "state": {
                        "description": "Subject's state (2 letters code)", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "country": {
                        "description": "Subject's state", 
                        "required": true, 
                        "type": "string"
                      }
                    }
                  }, 
                  "validity": {
                    "description": "Certificate's validity info", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "expire": {
                        "description": "Expire date timestamp in Unix time format", 
                        "required": true, 
                        "type": "timestamp"
                      }, 
                      "issued": {
                        "description": "Issueing date timestamp in Unix time format", 
                        "required": true, 
                        "type": "timestamp"
                      }
                    }
                  }, 
                  "fingerprint": {
                    "description": "Certificate's fingerprint info", 
                    "required": true, 
                    "type": "number"
                  }, 
                  "key": {
                    "description": "Contains information about the certificate's key", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "algorithm": {
                        "required": true, 
                        "type": "string", 
                        "description": "Key algorithm", 
                        "enum": [
                          "RSA"
                        ]
                      }, 
                      "size": {
                        "description": "Key length", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }, 
                  "pem": {
                    "description": "Contains the certificate in PEM format encode with Base64. This field contains only the public part of the certificate.", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }, 
              "profiler_export_certificate": {
                "description": "Certificate's info", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "issued_to": {
                    "description": "Certificate's details", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "common_name": {
                        "description": "Subject's common name", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "email": {
                        "description": "Subject's email", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization": {
                        "description": "Subject's organization", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization_unit": {
                        "description": "Subject's organization unit", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "locality": {
                        "description": "Subject's locality", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "state": {
                        "description": "Subject's state (2 letters code)", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "country": {
                        "description": "Subject's state", 
                        "required": true, 
                        "type": "string"
                      }
                    }
                  }, 
                  "issued_by": {
                    "description": "Certificate's details", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "common_name": {
                        "description": "Subject's common name", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "email": {
                        "description": "Subject's email", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization": {
                        "description": "Subject's organization", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "organization_unit": {
                        "description": "Subject's organization unit", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "locality": {
                        "description": "Subject's locality", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "state": {
                        "description": "Subject's state (2 letters code)", 
                        "required": true, 
                        "type": "string"
                      }, 
                      "country": {
                        "description": "Subject's state", 
                        "required": true, 
                        "type": "string"
                      }
                    }
                  }, 
                  "validity": {
                    "description": "Certificate's validity info", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "expire": {
                        "description": "Expire date timestamp in Unix time format", 
                        "required": true, 
                        "type": "timestamp"
                      }, 
                      "issued": {
                        "description": "Issueing date timestamp in Unix time format", 
                        "required": true, 
                        "type": "timestamp"
                      }
                    }
                  }, 
                  "fingerprint": {
                    "description": "Certificate's fingerprint info", 
                    "required": true, 
                    "type": "number"
                  }, 
                  "key": {
                    "description": "Contains information about the certificate's key", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "algorithm": {
                        "required": true, 
                        "type": "string", 
                        "description": "Key algorithm", 
                        "enum": [
                          "RSA"
                        ]
                      }, 
                      "size": {
                        "description": "Key length", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }, 
                  "pem": {
                    "description": "Contains the certificate in PEM format encode with Base64. This field contains only the public part of the certificate.", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }, 
              "trusted_profilers": {
                "description": "List of Trusted Profiler certificates", 
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "trusted_profiler", 
                  "type": "object", 
                  "properties": {
                    "id": {
                      "description": "ID associated with the Trusted Profiler certificate", 
                      "required": true, 
                      "type": "string"
                    }, 
                    "certificate": {
                      "description": "Certificate's info", 
                      "required": true, 
                      "type": "object", 
                      "properties": {
                        "issued_to": {
                          "description": "Certificate's details", 
                          "required": true, 
                          "type": "object", 
                          "properties": {
                            "common_name": {
                              "description": "Subject's common name", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "email": {
                              "description": "Subject's email", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "organization": {
                              "description": "Subject's organization", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "organization_unit": {
                              "description": "Subject's organization unit", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "locality": {
                              "description": "Subject's locality", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "state": {
                              "description": "Subject's state (2 letters code)", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "country": {
                              "description": "Subject's state", 
                              "required": true, 
                              "type": "string"
                            }
                          }
                        }, 
                        "issued_by": {
                          "description": "Certificate's details", 
                          "required": true, 
                          "type": "object", 
                          "properties": {
                            "common_name": {
                              "description": "Subject's common name", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "email": {
                              "description": "Subject's email", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "organization": {
                              "description": "Subject's organization", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "organization_unit": {
                              "description": "Subject's organization unit", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "locality": {
                              "description": "Subject's locality", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "state": {
                              "description": "Subject's state (2 letters code)", 
                              "required": true, 
                              "type": "string"
                            }, 
                            "country": {
                              "description": "Subject's state", 
                              "required": true, 
                              "type": "string"
                            }
                          }
                        }, 
                        "validity": {
                          "description": "Certificate's validity info", 
                          "required": true, 
                          "type": "object", 
                          "properties": {
                            "expire": {
                              "description": "Expire date timestamp in Unix time format", 
                              "required": true, 
                              "type": "timestamp"
                            }, 
                            "issued": {
                              "description": "Issueing date timestamp in Unix time format", 
                              "required": true, 
                              "type": "timestamp"
                            }
                          }
                        }, 
                        "fingerprint": {
                          "description": "Certificate's fingerprint info", 
                          "required": true, 
                          "type": "number"
                        }, 
                        "key": {
                          "description": "Contains information about the certificate's key", 
                          "required": true, 
                          "type": "object", 
                          "properties": {
                            "algorithm": {
                              "required": true, 
                              "type": "string", 
                              "description": "Key algorithm", 
                              "enum": [
                                "RSA"
                              ]
                            }, 
                            "size": {
                              "description": "Key length", 
                              "required": true, 
                              "type": "number"
                            }
                          }
                        }, 
                        "pem": {
                          "description": "Contains the certificate in PEM format encode with Base64. This field contains only the public part of the certificate.", 
                          "required": true, 
                          "type": "string"
                        }
                      }
                    }
                  }, 
                  "description": "Contains Trusted Profilers certificates info"
                }
              }
            }
          }
        }, 
        "Update profiler export certificate": {
          "path": "settings/certificates/profiler_export", 
          "httpmethod": "PUT", 
          "description": "Upload a new profiler export certificate.", 
          "request": {
            "description": "Validity days for the new self signed certificate", 
            "type": "object", 
            "id": "certificate", 
            "properties": {
              "pem": {
                "description": "Contains the certificate in PEM format encode with Base64. This field contains both the public and private part of the new certificate.", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Update web UI certificate": {
          "path": "settings/certificates/web", 
          "httpmethod": "PUT", 
          "description": "Upload a new web UI certificate.", 
          "request": {
            "description": "Validity days for the new self signed certificate", 
            "type": "object", 
            "id": "certificate", 
            "properties": {
              "pem": {
                "description": "Contains the certificate in PEM format encode with Base64. This field contains both the public and private part of the new certificate.", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Generate profiler export certificate": {
          "path": "settings/certificates/profiler_export/generate", 
          "httpmethod": "POST", 
          "description": "Request generation of new self-signed certificate and private key for profiler export", 
          "request": {
            "description": "Contains info used to generate a new self signed certificate (only for Web Server and Profiler Export certificates)", 
            "type": "object", 
            "id": "certificate_info", 
            "properties": {
              "issued_to": {
                "description": "Contains data to generate a new self-signed certificate", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "email": {
                    "description": "Subject's email", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "organization": {
                    "description": "Subject's organization", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "organization_unit": {
                    "description": "Subject's organization unit", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "locality": {
                    "description": "Subject's locality", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "state": {
                    "description": "Subject's state (2 letters code)", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "country": {
                    "description": "Subject's country", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }, 
              "validity": {
                "description": "Validity days for a new self signed certificate", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "days": {
                    "description": "Validity days for a new self signed certificate", 
                    "required": true, 
                    "type": "number"
                  }
                }
              }
            }
          }
        }, 
        "Generate web UI certificate": {
          "path": "settings/certificates/web/generate", 
          "httpmethod": "POST", 
          "description": "Request generation of new self-signed certificate and private key for the web UI", 
          "request": {
            "description": "Contains info used to generate a new self signed certificate (only for Web Server and Profiler Export certificates)", 
            "type": "object", 
            "id": "certificate_info", 
            "properties": {
              "issued_to": {
                "description": "Contains data to generate a new self-signed certificate", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "email": {
                    "description": "Subject's email", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "organization": {
                    "description": "Subject's organization", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "organization_unit": {
                    "description": "Subject's organization unit", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "locality": {
                    "description": "Subject's locality", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "state": {
                    "description": "Subject's state (2 letters code)", 
                    "required": true, 
                    "type": "string"
                  }, 
                  "country": {
                    "description": "Subject's country", 
                    "required": true, 
                    "type": "string"
                  }
                }
              }, 
              "validity": {
                "description": "Validity days for a new self signed certificate", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "days": {
                    "description": "Validity days for a new self signed certificate", 
                    "required": true, 
                    "type": "number"
                  }
                }
              }
            }
          }
        }, 
        "Copy web UI certificate for profiler export": {
          "path": "settings/certificates/profiler_export/copy_web", 
          "httpmethod": "POST", 
          "description": "Request that web UI certificate be reused for profiler export."
        }, 
        "Copy profiler export certificate for web UI": {
          "path": "settings/certificates/web/copy_profiler_export", 
          "httpmethod": "POST", 
          "description": "Request that profiler export certificate be reused for the web UI."
        }, 
        "Upload trusted profiler certificate": {
          "path": "settings/certificates/trusted_profilers", 
          "httpmethod": "POST", 
          "description": "Upload a new trusted profiler certificate", 
          "request": {
            "description": "Used to upload a new trusted profiler certificate", 
            "type": "object", 
            "id": "trusted_profiler", 
            "properties": {
              "id": {
                "description": "ID associated with the new Trusted Profiler certificate", 
                "required": true, 
                "type": "string"
              }, 
              "pem": {
                "description": "Contains the certificate in PEM format encode with Base64. This field contains only the public part of the certificate.", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Delete trusted profiler certificate": {
          "path": "settings/certificates/trusted_profilers/{certificate_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete trusted profiler certificate {certificate_id}."
        }
      }
    }, 
    "users / groups": {
      "methods": {
        "List groups": {
          "httpmethod": "GET", 
          "path": "auth/groups", 
          "description": "List local user groups defined for this Shark", 
          "parameters": {}, 
          "response": {
            "type": "array", 
            "description": "List of groups", 
            "id": "groups", 
            "items": {
              "id": "group", 
              "$ref": "group"
            }
          }
        }, 
        "Create group": {
          "httpmethod": "POST", 
          "path": "auth/groups", 
          "description": "Create a new local user group", 
          "request": {
            "$ref": "group"
          }
        }, 
        "Get group detail": {
          "httpmethod": "GET", 
          "path": "auth/groups/{group_id}", 
          "description": "Retrieve a user group", 
          "parameters": {
            "group_id": {
              "type": "string", 
              "description": "Group identifier", 
              "required": true
            }
          }, 
          "response": {
            "$ref": "group"
          }
        }, 
        "Delete group": {
          "httpmethod": "DELETE", 
          "path": "auth/groups/{group_id}", 
          "description": "Delete an existing user group", 
          "parameters": {
            "group_id": {
              "type": "string", 
              "description": "Group identifier", 
              "required": true
            }
          }
        }, 
        "List users": {
          "path": "auth/users", 
          "httpmethod": "GET", 
          "description": "List of local users", 
          "response": {
            "type": "array", 
            "description": "List of users", 
            "id": "users", 
            "items": {
              "id": "user", 
              "$ref": "user"
            }
          }
        }, 
        "Create user": {
          "path": "auth/users", 
          "httpmethod": "POST", 
          "description": "Create new local user", 
          "request": {
            "description": "Information to create a new user", 
            "type": "object", 
            "id": "user", 
            "properties": {
              "name": {
                "description": "User name", 
                "required": true, 
                "type": "string"
              }, 
              "can_be_locked": {
                "description": "'true' if user can get locked, 'false' otherwise", 
                "required": true, 
                "type": "boolean"
              }, 
              "password": {
                "description": "User password", 
                "required": true, 
                "type": "string"
              }, 
              "groups": {
                "description": "List of groups of which the user is a member", 
                "required": true, 
                "type": "array", 
                "items": {
                  "type": "string", 
                  "id": "group"
                }
              }
            }
          }
        }, 
        "Get users detail": {
          "path": "auth/users/{user_id}", 
          "httpmethod": "GET", 
          "description": "Get info on local user", 
          "parameters": {
            "user_id": {
              "type": "string", 
              "description": "User identifier", 
              "required": true
            }
          }, 
          "response": {
            "$ref": "user"
          }
        }, 
        "Update user password": {
          "path": "auth/users/{user_id}", 
          "httpmethod": "PUT", 
          "description": "Update password for local user", 
          "parameters": {
            "user_id": {
              "type": "string", 
              "description": "User identifier", 
              "required": true
            }
          }, 
          "request": {
            "description": "Updates user password", 
            "type": "object", 
            "id": "password", 
            "properties": {
              "new_password": {
                "description": "New password", 
                "required": true, 
                "type": "string"
              }, 
              "existing_password": {
                "description": "Existing password", 
                "required": false, 
                "type": "string"
              }
            }
          }
        }, 
        "Delete user": {
          "path": "auth/users/{user_id}", 
          "httpmethod": "DELETE", 
          "description": "Delete local user"
        }, 
        "Update user locked state": {
          "path": "auth/users/{user_id}/locked", 
          "httpmethod": "PUT", 
          "description": "Update locked status of user [USER_ID]", 
          "parameters": {
            "user_id": {
              "type": "string", 
              "description": "User identifier", 
              "required": true
            }
          }, 
          "request": {
            "description": "Unlock a locked user", 
            "type": "object", 
            "id": "locked", 
            "properties": {
              "value": {
                "description": "'false' to unlock a locked user. 'true' value not supported as you cannot lock an unlocked user.", 
                "required": true, 
                "type": "boolean"
              }
            }
          }
        }
      }
    }, 
    "ping": {
      "methods": {
        "Ping (GET)": {
          "path": "ping", 
          "httpmethod": "GET", 
          "description": "Generic ping response.", 
          "response": {
            "type": "object", 
            "id": "ping", 
            "properties": {}
          }
        }, 
        "Ping (POST)": {
          "path": "ping", 
          "httpmethod": "POST", 
          "description": "Test availability of POST method."
        }, 
        "Ping (PUT)": {
          "path": "ping", 
          "httpmethod": "PUT", 
          "description": "Test availability of PUT method."
        }, 
        "Ping (DELETE)": {
          "path": "ping", 
          "httpmethod": "DELETE", 
          "description": "Test availability of DELETE method."
        }
      }
    }, 
    "info": {
      "methods": {
        "List supported tap types": {
          "path": "info/tap_types", 
          "httpmethod": "GET", 
          "description": "List of supported tap types", 
          "response": {
            "type": "array", 
            "id": "tap_types", 
            "items": {
              "id": "tap_type", 
              "type": "object", 
              "properties": {
                "type": {
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "CPACKET", 
                    "GIGAMON_HEADER", 
                    "GIGAMON_TRAILER", 
                    "GIGAMON_TRAILER_X12", 
                    "VSS", 
                    "VSS_PORT_ID", 
                    "UNKNOWN"
                  ]
                }, 
                "type_pretty": {
                  "required": true, 
                  "type": "string"
                }, 
                "description": {
                  "required": true, 
                  "type": "string"
                }
              }
            }
          }
        }, 
        "Get job defaults": {
          "path": "info/job_defaults", 
          "httpmethod": "GET", 
          "description": "List of capture job defaults", 
          "response": {
            "description": "Default values for a new capture job", 
            "type": "object", 
            "id": "job_defaults", 
            "properties": {
              "snap_length": {
                "description": "Default snap length", 
                "required": true, 
                "type": "number"
              }, 
              "retention_size_limit": {
                "description": "Default size limit (bytes) on retained capture job", 
                "required": true, 
                "type": "number"
              }, 
              "retention_size_pct": {
                "description": "Default max percent of disk for retained capture job", 
                "required": true, 
                "type": "number"
              }, 
              "index_size_limit": {
                "description": "Default size limit (bytes) of index for new capture job", 
                "required": true, 
                "type": "number"
              }, 
              "index_size_pct": {
                "description": "Default max percent of disk for index", 
                "required": true, 
                "type": "number"
              }, 
              "job_name": {
                "description": "Default name of new job", 
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "List supported data types": {
          "path": "info/types", 
          "httpmethod": "GET", 
          "description": "List of supported Shark data types in views", 
          "response": {
            "type": "array", 
            "description": "List of supported Shark types", 
            "id": "types", 
            "items": {
              "id": "type", 
              "type": "object", 
              "properties": {
                "name": {
                  "description": "Shark type ID", 
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "PROTOCOL", 
                    "BOOLEAN", 
                    "UINT8", 
                    "UINT16", 
                    "UINT24", 
                    "UINT32", 
                    "UINT64", 
                    "INT8", 
                    "INT16", 
                    "INT24", 
                    "INT32", 
                    "INT64", 
                    "FLOAT", 
                    "DOUBLE", 
                    "ABSOLUTE_TIME", 
                    "RELATIVE_TIME", 
                    "STRING", 
                    "STRINGZ", 
                    "SHORT_STRING", 
                    "UINT_STRING", 
                    "ETHER", 
                    "BYTES", 
                    "UINT_BYTES", 
                    "IPv4", 
                    "IPv6", 
                    "UDP_PORT", 
                    "TCP_PORT", 
                    "IPXNET", 
                    "FRAMENUM", 
                    "PCRE", 
                    "GUID", 
                    "OID", 
                    "NUM_TYPES", 
                    "INDEX", 
                    "EUI64"
                  ]
                }, 
                "calculations": {
                  "description": "List of Shark calculations", 
                  "required": true, 
                  "type": "array", 
                  "id": "calculations", 
                  "items": {
                    "id": "calculation", 
                    "type": "string", 
                    "enum": [
                      "NONE", 
                      "SUM", 
                      "MAX", 
                      "MIN", 
                      "AVG", 
                      "TIME_AVG"
                    ]
                  }
                }
              }, 
              "description": "Information for one Shark type"
            }
          }
        }, 
        "List supported extractor fields": {
          "path": "info/fields", 
          "httpmethod": "GET", 
          "description": "List of supported Shark view extractor fields", 
          "response": {
            "type": "array", 
            "id": "fields", 
            "items": {
              "id": "field", 
              "type": "object", 
              "properties": {
                "name": {
                  "required": true, 
                  "type": "string"
                }, 
                "type": {
                  "required": true, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "PROTOCOL", 
                    "BOOLEAN", 
                    "UINT8", 
                    "UINT16", 
                    "UINT24", 
                    "UINT32", 
                    "UINT64", 
                    "INT8", 
                    "INT16", 
                    "INT24", 
                    "INT32", 
                    "INT64", 
                    "FLOAT", 
                    "DOUBLE", 
                    "ABSOLUTE_TIME", 
                    "RELATIVE_TIME", 
                    "STRING", 
                    "STRINGZ", 
                    "SHORT_STRING", 
                    "UINT_STRING", 
                    "ETHER", 
                    "BYTES", 
                    "UINT_BYTES", 
                    "IPv4", 
                    "IPv6", 
                    "UDP_PORT", 
                    "TCP_PORT", 
                    "IPXNET", 
                    "FRAMENUM", 
                    "PCRE", 
                    "GUID", 
                    "OID", 
                    "NUM_TYPES", 
                    "INDEX", 
                    "EUI64"
                  ]
                }, 
                "id": {
                  "required": true, 
                  "type": "string"
                }, 
                "group": {
                  "required": true, 
                  "type": "string"
                }, 
                "display_type": {
                  "required": false, 
                  "type": "string", 
                  "enum": [
                    "NONE", 
                    "DEC", 
                    "HEX", 
                    "OCT", 
                    "DEC_HEX", 
                    "HEX_DEC", 
                    "PERC"
                  ]
                }, 
                "description": {
                  "required": false, 
                  "type": "string"
                }, 
                "multi_segment": {
                  "required": false, 
                  "type": "boolean"
                }, 
                "index_calculations": {
                  "required": false, 
                  "type": "array", 
                  "items": {
                    "id": "index_calculation", 
                    "type": "string", 
                    "enum": [
                      "NONE", 
                      "SUM", 
                      "MAX", 
                      "MIN", 
                      "AVG", 
                      "TIME_AVG"
                    ]
                  }
                }, 
                "dimension": {
                  "required": false, 
                  "type": "boolean"
                }, 
                "index": {
                  "required": false, 
                  "type": "boolean"
                }
              }
            }
          }
        }, 
        "List supported file extensions": {
          "path": "info/file_extensions", 
          "httpmethod": "GET", 
          "description": "List of Shark file extensions", 
          "response": {
            "type": "array", 
            "id": "file_extensions", 
            "items": {
              "id": "file_extension", 
              "type": "object", 
              "properties": {
                "description": {
                  "required": true, 
                  "type": "string"
                }, 
                "value": {
                  "required": true, 
                  "type": "string"
                }
              }
            }
          }
        }, 
        "List mac vendors": {
          "path": "info/mac_vendors", 
          "httpmethod": "GET", 
          "description": "List of supported MAC vendors (NOTE: This is a long listing.)", 
          "response": {
            "type": "array", 
            "id": "mac_vendors", 
            "items": {
              "id": "mac_vendor", 
              "type": "object", 
              "properties": {
                "code": {
                  "required": true, 
                  "type": "string"
                }, 
                "name": {
                  "required": true, 
                  "type": "string"
                }
              }
            }
          }
        }, 
        "List timezones": {
          "path": "info/timezones", 
          "httpmethod": "GET", 
          "description": "List of supported timezones", 
          "response": {
            "type": "object", 
            "id": "timezone_config", 
            "properties": {
              "selected": {
                "required": true, 
                "type": "string"
              }, 
              "timezones": {
                "required": true, 
                "type": "array", 
                "items": {
                  "type": "string", 
                  "id": "timezone"
                }
              }
            }
          }
        }
      }
    }, 
    "system": {
      "methods": {
        "Get system info": {
          "path": "system/info", 
          "httpmethod": "GET", 
          "description": "Detailed information about the currently running Shark.", 
          "response": {
            "description": "Information about this Shark", 
            "type": "object", 
            "id": "system_info", 
            "properties": {
              "hostname": {
                "description": "Host name of this Shark", 
                "required": true, 
                "type": "string"
              }, 
              "version": {
                "description": "Current version of Shark software", 
                "required": true, 
                "type": "string"
              }, 
              "internal_version": {
                "description": "Current long-form version of Shark software", 
                "required": true, 
                "type": "string"
              }, 
              "protocol_version": {
                "description": "Current version of Shark REST API", 
                "required": true, 
                "type": "string"
              }, 
              "view_version": {
                "description": "Current version of Shark views", 
                "required": true, 
                "type": "string"
              }, 
              "build_time": {
                "description": "Date and time at which this Shark was built", 
                "required": true, 
                "type": "string"
              }, 
              "local_time": {
                "description": "Current system time", 
                "required": true, 
                "$ref": "timestamp-hp"
              }, 
              "start_time": {
                "description": "Time at which this Shark started", 
                "required": true, 
                "$ref": "timestamp-hp"
              }, 
              "uptime": {
                "description": "Elapsed time (in nanoseconds) since this Shark was started", 
                "required": true, 
                "type": "number"
              }, 
              "timezone": {
                "description": "UTC offset for this Shark", 
                "required": true, 
                "type": "string"
              }, 
              "system_type": {
                "description": "Operating system on which this Shark is running", 
                "required": true, 
                "type": "string"
              }, 
              "build_type": {
                "description": "Type of Shark build ('Final' for production, 'Debug' for testing)", 
                "required": true, 
                "type": "string"
              }, 
              "build_variant": {
                "description": "Variant of Shark build", 
                "required": true, 
                "type": "string"
              }, 
              "has_webui": {
                "description": "'true' if the web UI is enabled for this build", 
                "required": true, 
                "type": "boolean"
              }, 
              "webui_port": {
                "description": "(If web UI is enabled) Port on which web UI can be accessed", 
                "required": false, 
                "type": "number"
              }, 
              "webui_SSL": {
                "description": "(If web UI is enabled) 'true' if web UI uses SSL for transport", 
                "required": false, 
                "type": "boolean"
              }, 
              "webui_root_path": {
                "description": "(If web UI is enabled) Root path for web UI resources", 
                "required": false, 
                "type": "string"
              }, 
              "embedded_wireshark": {
                "description": "'true' if Wireshark is embedded with this Shark", 
                "required": false, 
                "type": "boolean"
              }, 
              "default_user_directory": {
                "description": "Default directory for user files", 
                "required": false, 
                "type": "string"
              }
            }
          }
        }, 
        "Get audit log": {
          "path": "system/audit_log", 
          "httpmethod": "GET", 
          "description": "Audit log as text file.  Response content type is 'text/plain'."
        }, 
        "Get version info": {
          "path": "system/version_info", 
          "httpmethod": "GET", 
          "description": "Version information for the currently running Shark.", 
          "response": {
            "type": "object", 
            "id": "version_info", 
            "properties": {
              "shark_version": {
                "required": true, 
                "type": "string"
              }, 
              "shark_probe_version": {
                "required": true, 
                "type": "string"
              }, 
              "protocol_version": {
                "required": true, 
                "type": "string"
              }, 
              "packet_recorder_version": {
                "required": true, 
                "type": "string"
              }, 
              "turbocap_api_version": {
                "required": true, 
                "type": "string"
              }, 
              "turbocap_driver_version": {
                "required": true, 
                "type": "string"
              }, 
              "serial_number": {
                "required": true, 
                "type": "string"
              }
            }
          }
        }, 
        "Get system storage info": {
          "path": "system/storage", 
          "httpmethod": "GET", 
          "description": "Storage monitor status.", 
          "response": {
            "type": "object", 
            "id": "storage", 
            "properties": {
              "can_reinitialize": {
                "required": false, 
                "type": "boolean"
              }, 
              "state": {
                "required": true, 
                "type": "string"
              }, 
              "state_type": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "OK", 
                  "WARNING", 
                  "ERROR"
                ]
              }, 
              "available_space": {
                "required": false, 
                "type": "number"
              }, 
              "allocated_space": {
                "required": false, 
                "type": "number"
              }, 
              "total_space": {
                "required": false, 
                "type": "number"
              }, 
              "used_space": {
                "required": false, 
                "type": "number"
              }, 
              "disks": {
                "required": false, 
                "type": "array", 
                "items": {
                  "id": "disk", 
                  "type": "object", 
                  "properties": {
                    "row_id": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "column_id": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "label": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "model": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "serial": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "expected_serial": {
                      "required": false, 
                      "type": "string"
                    }, 
                    "state": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "state_type": {
                      "required": true, 
                      "type": "string", 
                      "enum": [
                        "OK", 
                        "WARNING", 
                        "ERROR"
                      ]
                    }
                  }
                }
              }
            }
          }
        }, 
        "Reinitialize storage system": {
          "path": "system/storage/reinitialize", 
          "httpmethod": "POST", 
          "description": "Request reinitialization of storage subsystem."
        }, 
        "Format storage system": {
          "path": "system/format_storage", 
          "httpmethod": "POST", 
          "description": "Request packet storage reformat.", 
          "request": {
            "description": "Configuration information to format the packet storage", 
            "type": "object", 
            "id": "format_storage", 
            "properties": {
              "reserved_space": {
                "description": "Percentage of unused space at the end of the packet storage", 
                "required": true, 
                "type": "number"
              }
            }
          }
        }, 
        "Restart system": {
          "path": "system/restart", 
          "httpmethod": "POST", 
          "description": "Restart the shark service or reboot the system.", 
          "request": {
            "description": "Configuration to restart", 
            "type": "object", 
            "id": "restart", 
            "properties": {
              "type": {
                "required": true, 
                "type": "string", 
                "description": "Type of service to restart", 
                "enum": [
                  "SHARK", 
                  "PROBE", 
                  "PACKETRECORDER"
                ]
              }
            }
          }
        }, 
        "Shutdown system": {
          "path": "system/shutdown", 
          "httpmethod": "POST", 
          "description": "Shut down the system."
        }, 
        "Generate system dump": {
          "path": "system/sysdump", 
          "parameters": {
            "dump_type": {
              "type": "string", 
              "description": "'CURRENT': Includes current Shark Probe and Shark Packet Recorder logs; 'PROBE': Includes all Shark Probe logs; 'PACKETRECORDER': Includes all Shark Packet Recorder logs; 'COMPLETE': Includes all Shark Probe and Shark Packet Recorder logs.", 
              "required": false
            }, 
            "case_id": {
              "type": "string", 
              "description": "Optional case ID to be attached to output file name.", 
              "required": false
            }
          }, 
          "httpmethod": "GET"
        }, 
        "Get system update status": {
          "path": "system/update", 
          "httpmethod": "GET", 
          "description": "Current system update status.", 
          "response": {
            "type": "object", 
            "id": "update", 
            "properties": {
              "state": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "NEUTRAL", 
                  "INITIALIZING", 
                  "INITIALIZED", 
                  "RUNNING", 
                  "FAILED_GRACEFUL", 
                  "FAILED_CRITICAL", 
                  "UNKNOWN"
                ]
              }, 
              "shark_version": {
                "required": true, 
                "type": "string"
              }, 
              "shark_user_version": {
                "required": true, 
                "type": "string"
              }, 
              "init_id": {
                "required": false, 
                "type": "string"
              }, 
              "iso_name": {
                "required": false, 
                "type": "string"
              }, 
              "iso_size": {
                "required": false, 
                "type": "number"
              }, 
              "iso_sha_hash": {
                "required": false, 
                "type": "string"
              }, 
              "update_to": {
                "required": false, 
                "type": "string"
              }, 
              "update_to_internal": {
                "required": false, 
                "type": "string"
              }, 
              "pre_start_message": {
                "required": false, 
                "type": "string"
              }, 
              "estimate": {
                "required": true, 
                "type": "number"
              }, 
              "executing_job_description": {
                "required": false, 
                "type": "string"
              }, 
              "comment": {
                "required": false, 
                "type": "string"
              }, 
              "need_reboot": {
                "required": false, 
                "type": "boolean"
              }
            }
          }
        }, 
        "Modify system update state": {
          "path": "system/update/state", 
          "httpmethod": "PUT", 
          "description": "Update state of system update.", 
          "request": {
            "description": "Request change in update state value on server", 
            "type": "object", 
            "id": "update_state", 
            "properties": {
              "state": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "NEUTRAL", 
                  "INITIALIZING", 
                  "INITIALIZED", 
                  "RUNNING", 
                  "FAILED_GRACEFUL", 
                  "FAILED_CRITICAL", 
                  "UNKNOWN"
                ]
              }, 
              "init_id": {
                "required": false, 
                "type": "string"
              }, 
              "reset": {
                "required": false, 
                "type": "boolean"
              }
            }
          }, 
          "response": {
            "type": "object", 
            "id": "update", 
            "properties": {
              "state": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "NEUTRAL", 
                  "INITIALIZING", 
                  "INITIALIZED", 
                  "RUNNING", 
                  "FAILED_GRACEFUL", 
                  "FAILED_CRITICAL", 
                  "UNKNOWN"
                ]
              }, 
              "shark_version": {
                "required": true, 
                "type": "string"
              }, 
              "shark_user_version": {
                "required": true, 
                "type": "string"
              }, 
              "init_id": {
                "required": false, 
                "type": "string"
              }, 
              "iso_name": {
                "required": false, 
                "type": "string"
              }, 
              "iso_size": {
                "required": false, 
                "type": "number"
              }, 
              "iso_sha_hash": {
                "required": false, 
                "type": "string"
              }, 
              "update_to": {
                "required": false, 
                "type": "string"
              }, 
              "update_to_internal": {
                "required": false, 
                "type": "string"
              }, 
              "pre_start_message": {
                "required": false, 
                "type": "string"
              }, 
              "estimate": {
                "required": true, 
                "type": "number"
              }, 
              "executing_job_description": {
                "required": false, 
                "type": "string"
              }, 
              "comment": {
                "required": false, 
                "type": "string"
              }, 
              "need_reboot": {
                "required": false, 
                "type": "boolean"
              }
            }
          }
        }, 
        "Upload system update iso": {
          "path": "system/update/iso", 
          "httpmethod": "POST", 
          "description": "Upload a new ISO file for system update", 
          "headers": {
            "Content-Type": {
              "type": "string", 
              "description": "Content type", 
              "notes": "Must be 'multipart/form-data'", 
              "required": true
            }, 
            "Content-Disposition": {
              "type": "string", 
              "description": "Name of the file", 
              "notes": "Must be of the form Content-Disposition: form-data; name=\"iso-file\"; filename=\"[FILENAME]\"", 
              "required": true
            }
          }, 
          "request": {
            "type": "data", 
            "content_type": "multipart/form-data", 
            "description": "update ISO file"
          }
        }, 
        "Fetch system update iso": {
          "path": "system/update/url", 
          "httpmethod": "POST", 
          "description": "Request fetch of update ISO from a URL", 
          "request": {
            "type": "object", 
            "id": "update_fetch", 
            "properties": {
              "url": {
                "required": true, 
                "type": "string"
              }
            }
          }, 
          "response": {
            "type": "object", 
            "id": "update", 
            "properties": {
              "state": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "NEUTRAL", 
                  "INITIALIZING", 
                  "INITIALIZED", 
                  "RUNNING", 
                  "FAILED_GRACEFUL", 
                  "FAILED_CRITICAL", 
                  "UNKNOWN"
                ]
              }, 
              "shark_version": {
                "required": true, 
                "type": "string"
              }, 
              "shark_user_version": {
                "required": true, 
                "type": "string"
              }, 
              "init_id": {
                "required": false, 
                "type": "string"
              }, 
              "iso_name": {
                "required": false, 
                "type": "string"
              }, 
              "iso_size": {
                "required": false, 
                "type": "number"
              }, 
              "iso_sha_hash": {
                "required": false, 
                "type": "string"
              }, 
              "update_to": {
                "required": false, 
                "type": "string"
              }, 
              "update_to_internal": {
                "required": false, 
                "type": "string"
              }, 
              "pre_start_message": {
                "required": false, 
                "type": "string"
              }, 
              "estimate": {
                "required": true, 
                "type": "number"
              }, 
              "executing_job_description": {
                "required": false, 
                "type": "string"
              }, 
              "comment": {
                "required": false, 
                "type": "string"
              }, 
              "need_reboot": {
                "required": false, 
                "type": "boolean"
              }
            }
          }
        }
      }
    }, 
    "stats": {
      "methods": {
        "Get memory stats": {
          "path": "stats/memory", 
          "httpmethod": "GET", 
          "description": "System memory information.", 
          "response": {
            "type": "object", 
            "id": "memory", 
            "properties": {
              "status": {
                "required": true, 
                "type": "string", 
                "enum": [
                  "OK", 
                  "WARNING", 
                  "CRITICAL", 
                  "CONFIGURATION_ERROR"
                ]
              }, 
              "total": {
                "required": true, 
                "type": "number"
              }, 
              "used": {
                "required": true, 
                "type": "number"
              }, 
              "available": {
                "required": true, 
                "type": "number"
              }, 
              "reserved": {
                "required": true, 
                "type": "number"
              }, 
              "by_category": {
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "category", 
                  "type": "object", 
                  "properties": {
                    "name": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "allocations": {
                      "required": true, 
                      "type": "number"
                    }, 
                    "bytes": {
                      "required": true, 
                      "type": "number"
                    }
                  }
                }
              }, 
              "by_handle": {
                "required": true, 
                "type": "array", 
                "items": {
                  "id": "handle", 
                  "type": "object", 
                  "properties": {
                    "name": {
                      "required": true, 
                      "type": "string"
                    }, 
                    "by_category": {
                      "required": true, 
                      "type": "array", 
                      "items": {
                        "id": "category", 
                        "type": "object", 
                        "properties": {
                          "name": {
                            "required": true, 
                            "type": "string"
                          }, 
                          "allocations": {
                            "required": true, 
                            "type": "number"
                          }, 
                          "bytes": {
                            "required": true, 
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }, 
        "Get storage stats": {
          "path": "stats/storage", 
          "httpmethod": "GET", 
          "description": "System storage information.", 
          "response": {
            "type": "object", 
            "id": "storage", 
            "properties": {
              "packet_storage": {
                "required": true, 
                "type": "object", 
                "properties": {
                  "status": {
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "OK", 
                      "DISK_FULL", 
                      "CORRUPTED", 
                      "HW_FAILURE", 
                      "UNLICENSED", 
                      "LICENSE_EXCEEDED", 
                      "UNKNOWN"
                    ]
                  }, 
                  "total": {
                    "required": true, 
                    "type": "number"
                  }, 
                  "reserved": {
                    "required": true, 
                    "type": "number"
                  }, 
                  "allocated": {
                    "required": true, 
                    "type": "number"
                  }, 
                  "unallocated": {
                    "required": true, 
                    "type": "number"
                  }, 
                  "used": {
                    "required": true, 
                    "type": "number"
                  }, 
                  "unused": {
                    "required": true, 
                    "type": "number"
                  }
                }
              }, 
              "os_storage": {
                "required": true, 
                "type": "object", 
                "properties": {
                  "status": {
                    "required": true, 
                    "type": "string", 
                    "enum": [
                      "OK", 
                      "WARNING", 
                      "CRITICAL", 
                      "UNKNOWN"
                    ]
                  }, 
                  "disk_storage": {
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "total": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "used": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "unused": {
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }, 
                  "index_storage": {
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "total": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "allocated": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "unallocated": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "used": {
                        "required": true, 
                        "type": "number"
                      }, 
                      "unused": {
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }, 
        "Get profiler export stats": {
          "path": "stats/profiler_export", 
          "httpmethod": "GET", 
          "description": "Profiler export information.", 
          "response": {
            "description": "Statistics on the Profiler Export", 
            "type": "object", 
            "id": "profiler_export_stats", 
            "properties": {
              "last_minute": {
                "description": "Statistics on the data exported in the last minute", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "exported": {
                    "description": "Values sent to the profiler/s in the last minute", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "flows": {
                        "description": "Number of exported flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "packets": {
                        "description": "Cumulative number of packets for the exported flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "ip_bytes": {
                        "description": "Cumulative number of IP bytes (IP header included) for the exported flows", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }, 
                  "rejected": {
                    "description": "Values analyzed but not sent to the profiler/s in the last minute", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "flows": {
                        "description": "Number of rejected flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "packets": {
                        "description": "Cumulative number of packets for the rejected flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "ip_bytes": {
                        "description": "Cumulative number of IP bytes (IP header included) for the rejected flows", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }
                }
              }, 
              "last_week": {
                "description": "Statistics on the data exported in the last week", 
                "required": true, 
                "type": "object", 
                "properties": {
                  "exported": {
                    "description": "Values sent to the profiler/s in the last week", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "flows": {
                        "description": "Number of exported flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "packets": {
                        "description": "Cumulative number of packets for the exported flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "ip_bytes": {
                        "description": "Cumulative number of IP bytes (IP header included) for the exported flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "average_flows": {
                        "description": "Average number of flows exported in the last week", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "peak_flows": {
                        "description": "Max number of flows exported in a minute in the last week", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }, 
                  "rejected": {
                    "description": "Values analyzed but not sent to the profiler/s in the last week", 
                    "required": true, 
                    "type": "object", 
                    "properties": {
                      "flows": {
                        "description": "Number of rejected flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "packets": {
                        "description": "Cumulative number of packets for the rejected flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "ip_bytes": {
                        "description": "Cumulative number of IP bytes (IP header included) for the rejected flows", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "average_flows": {
                        "description": "Average number of flows rejected in the last week", 
                        "required": true, 
                        "type": "number"
                      }, 
                      "peak_flows": {
                        "description": "Max number of flows rejected in a minute in the last week", 
                        "required": true, 
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, 
  "errors": [
    {
      "error_id": "REQUEST_INVALID_INPUT", 
      "description": "The request is invalid", 
      "http_status": 400
    }, 
    {
      "error_id": "AUTH_REQUIRED", 
      "description": "Missing authentication credentials", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_INVALID_CREDENTIALS", 
      "description": "Invalid user name or password", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_INVALID_SESSION", 
      "description": "The authentication session has timed out or is invalid", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_EXPIRED_PASSWORD", 
      "description": "Account password has expired", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_INVALID_CODE", 
      "description": "The Oauth access code is invalid", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_EXPIRED_TOKEN", 
      "description": "The Oauth token has expired", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_EXPIRED_CODE", 
      "description": "The Oauth access code has expired", 
      "http_status": 401
    }, 
    {
      "error_id": "AUTH_DISABLED_ACCOUNT", 
      "description": "Account has been disabled", 
      "http_status": 403
    }, 
    {
      "error_id": "AUTH_FORBIDDEN", 
      "description": "Account does not have privileges for this request", 
      "http_status": 403
    }, 
    {
      "error_id": "AUTH_INVALID_TOKEN", 
      "description": "The Oauth token is invalid", 
      "http_status": 403
    }, 
    {
      "error_id": "RESOURCE_NOT_FOUND", 
      "description": "The requested resource was not found", 
      "http_status": 404
    }, 
    {
      "error_id": "HTTP_INVALID_METHOD", 
      "description": "The requested method is not supported by this resouce", 
      "http_status": 405
    }, 
    {
      "error_id": "INTERNAL_ERROR", 
      "description": "Internal error occurred", 
      "http_status": 500
    }
  ]
}
